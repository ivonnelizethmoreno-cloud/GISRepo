# Ethan Gueck - 7.13.23 - V2.2
# This code is intended to take 5 layers of input with lon and lat
# and output a html file with a map containing all 5 layers.
# To create the CSV go into QGIS. Run an "Extract vertices" on the polygon and then run "add geometry."
# !!!This application will fail on creating layers from other databases because the homes and cabinet layers do not have
# standardized nomenclature.!!!
#comentario_1
import tkinter as tk
import os, io
import glob
import ttkbootstrap as ttk
from tkinter import filedialog
from ttkbootstrap import Style
import folium
from folium import plugins
from folium.plugins import LocateControl
import psycopg2
import geopandas as gpd
import pandas as pd
import warnings
import time, datetime
from shapely.geometry import Polygon, MultiPolygon
from PIL import Image, ImageTk
warnings.filterwarnings("ignore", category=FutureWarning)
start_time3 = time.time()
now3 = datetime.datetime.now()
print(now3)
class create_csvs:
    def __init__(self, host, database, user, password, project):
        # Connect to the REDACTEDSQL database
        self.conn = psycopg2.connect(host=host, database=database, user=user, password=password)
        self.database = database
        self.project = project.get()
    def extract_geometry_type(self, geometry):
        if isinstance(geometry, Polygon):
            return 'Polygon'
        elif isinstance(geometry, MultiPolygon):
            return 'MultiPolygon'
        else:
            raise TypeError('Invalid geometry type')
    def extract_vertices(self, geometry):
        vertices = []
        geom_type = self.extract_geometry_type(geometry)
        if geom_type == 'Polygon':
            polygon = geometry
            for point in polygon.exterior.coords:
                vertices.append((point[0], point[1], None, None))
            for interior in polygon.interiors:
                for point in interior.coords:
                    vertices.append((point[0], point[1], None, None))
        elif geom_type == 'MultiPolygon':
            multi_polygon = [geometry] if isinstance(geometry, Polygon) else geometry
            vertex_part_counter = 0  # Initialize the vertex_part counter
            ring_index = 0  # Initialize the ring index
            for polygon in multi_polygon.geoms:
                vertex_part_counter += 1  # Increment the vertex_part counter
                for ring in polygon.interiors:
                    # Append the vertices of the interior ring with the corresponding vertex_part_ring value
                    ring_index += 1  # Increment the ring index for the next interior ring
                    for point in ring.coords:
                        vertices.append((point[0], point[1], ring_index, ring_index))
                # Append the vertices of the exterior ring with the corresponding vertex_part_ring value
                for point in polygon.exterior.coords:
                    vertices.append((point[0], point[1], vertex_part_counter, 0))
        return vertices
    def get_project_lld_polygon(self):
        conn = self.conn
        sql = f'SELECT * FROM "{self.database}"."REDACTED"."REDACTED_{self.project}_FSA"'
        gdf = gpd.read_postgis(sql, conn, geom_col='geom')
        gdf = gdf[gdf['geom'].notna()]
        gdf.reset_index(drop=True, inplace=True)
        gdf['unique_id'] = range(len(gdf))
        # Create an empty DataFrame to store the result
        df_result = pd.DataFrame(columns=['vertex_part', 'vertex_part_ring', 'vertex_part_index', 'xcoord', 'ycoord'])
        # Iterate over each row in the GeoDataFrame
        for _, row in gdf.iterrows():
            # Get the ID from the original GeoDataFrame
            original_id = row['unique_id']
            geometry = row['geom']
            if isinstance(geometry, gpd.GeoSeries):
                geometry = geometry.geometry.values[0]
            # Extract vertices from the geometry
            vertices = self.extract_vertices(geometry)
            # Create a DataFrame with the vertices
            df_vertices = pd.DataFrame(vertices, columns=['xcoord', 'ycoord', 'vertex_part', 'vertex_part_ring'])
            # Add the vertex_index column
            df_vertices['vertex_part_index'] = range(len(df_vertices))
            # Add the original ID column
            df_vertices['original_id'] = original_id
            # Append the vertices DataFrame to the result DataFrame
            df_result = pd.concat([df_result, df_vertices], ignore_index=True)
        # Merge the gdf GeoDataFrame with df_result
        merged_df = pd.merge(gdf, df_result, left_on='unique_id', right_on='original_id', how='left')
        merged_df = merged_df.drop('geom', axis=1)
        unique_vertex_part = merged_df['vertex_part'].unique()
        unique_vertex_part_ring = merged_df['vertex_part_ring'].unique()
        print("Unique vertex_part values:", unique_vertex_part)
        print("Unique vertex_part_ring values:", unique_vertex_part_ring)
        return merged_df

    def get_project_lld_rl(self):
        conn = self.conn
        # SQL query to retrieve the APB_NNPDC_LLD_ROUTE layer
        sql = f'SELECT * FROM "{self.database}"."REDACTED"."REDACTED_{self.project}_CONSTRUCTION"'
        # Read the query result into a GeoDataFrame
        gdf = gpd.read_postgis(sql, conn, geom_col='geom')
        # Drop rows with None geometries
        gdf = gdf[gdf['geom'].notna()]
        # Reset index and create a new column 'unique_id'
        gdf.reset_index(drop=True, inplace=True)
        gdf['unique_id'] = range(len(gdf))
        # Explode multi-part geometries into individual single-part geometries
        gdf_exploded = gdf.explode()
        # Create an empty DataFrame to store the result
        df_result = pd.DataFrame(columns=['vertex_part_index', 'xcoord', 'ycoord'])
        # Iterate over each row in the GeoDataFrame
        for _, row in gdf_exploded.iterrows():
            # Get the ID from the original GeoDataFrame
            original_id = row['unique_id']
            # Extract the coordinates from the geometry
            coordinates = row['geom'].coords
            # Create a DataFrame with the line segment coordinates
            df_segment = pd.DataFrame(coordinates, columns=['xcoord', 'ycoord'])
            # Add the vertex_part_index column
            df_segment['vertex_part_index'] = range(len(df_segment))
            # Add the original ID column
            df_segment['original_id'] = original_id
            # Append the segment DataFrame to the result DataFrame
            df_result = df_result.append(df_segment, ignore_index=True)
        # Join df_result and gdf based on unique_id and original_id
        merged_df = pd.merge(gdf, df_result, left_on=['unique_id'], right_on=['original_id'], how='left')
        return merged_df
    def get_project_lld_poles(self):
        conn = self.conn
        # SQL query to retrieve the APB_PROJECT_LLD_ROUTE layer
        sql = f'SELECT * FROM "{self.database}"."REDACTED"."REDACTED_{self.project}_LLD_POLES"'
        # Read the query result into a GeoDataFrame
        gdf = gpd.read_postgis(sql, conn, geom_col='geom')
        # Drop rows with None geometries
        gdf = gdf[gdf['geom'].notna()]
        # Reset index and create a new column 'unique_id'
        gdf.reset_index(drop=True, inplace=True)
        gdf['unique_id'] = range(len(gdf))
        # Create an empty DataFrame to store the result
        df_result = pd.DataFrame(columns=['xcoord', 'ycoord'])
        # Iterate over each row in the GeoDataFrame
        for _, row in gdf.iterrows():
            # Get the ID from the original GeoDataFrame
            original_id = row['unique_id']
            # Extract the coordinates from the geometry
            coordinates = row['geom'].coords
            # Create a DataFrame with the line segment coordinates
            df_segment = pd.DataFrame(coordinates, columns=['xcoord', 'ycoord'])
            # Add the original ID column
            df_segment['original_id'] = original_id
            # Append the segment DataFrame to the result DataFrame
            df_result = df_result.append(df_segment, ignore_index=True)
        # Join df_result and gdf based on unique_id and original_id
        merged_df = pd.merge(gdf, df_result, left_on=['unique_id'], right_on=['original_id'], how='left')
        return merged_df
    def get_project_lld_homes(self):
        conn = self.conn
        # SQL query to retrieve the REDACTED layer
        sql = f"SELECT table_name FROM information_schema.tables WHERE table_schema = 'REDACTED' AND table_name LIKE '%_REDACTED%'"
        cur = conn.cursor()
        cur.execute(sql)
        output = cur.fetchone()[0]
        sql = f'SELECT * FROM "{self.database}"."REDACTED"."{output}"'
        # Read the query result into a GeoDataFrame
        gdf = gpd.read_postgis(sql, conn, geom_col='geom')
        # Drop rows with None geometries
        gdf = gdf[gdf['geom'].notna()]
        # Reset index and create a new column 'unique_id'
        gdf.reset_index(drop=True, inplace=True)
        gdf['unique_id'] = range(len(gdf))
        # Create an empty DataFrame to store the result
        df_result = pd.DataFrame(columns=['xcoord', 'ycoord'])
        # Iterate over each row in the GeoDataFrame
        for _, row in gdf.iterrows():
            # Get the ID from the original GeoDataFrame
            original_id = row['unique_id']
            # Extract the coordinates from the geometry
            coordinates = row['geom'].coords
            # Create a DataFrame with the line segment coordinates
            df_segment = pd.DataFrame(coordinates, columns=['xcoord', 'ycoord'])
            # Add the original ID column
            df_segment['original_id'] = original_id
            # Append the segment DataFrame to the result DataFrame
            df_result = df_result.append(df_segment, ignore_index=True)
        # Join df_result and gdf based on unique_id and original_id
        merged_df = pd.merge(gdf, df_result, left_on=['unique_id'], right_on=['original_id'], how='left')
        return merged_df
    def get_project_lld_cabinets(self):
        conn = self.conn
        # SQL query to retrieve the REDACTED layer
        sql = f"SELECT table_name FROM information_schema.tables WHERE table_schema = 'REDACTED' AND table_name LIKE '%REDACTED'"
        cur = conn.cursor()
        cur.execute(sql)
        output = cur.fetchone()[0]
        sql = f'SELECT * FROM "{self.database}"."REDACTED"."{output}"'
        # Read the query result into a GeoDataFrame
        gdf = gpd.read_postgis(sql, conn, geom_col='geom')
        # Drop rows with None geometries
        gdf = gdf[gdf['geom'].notna()]
        # Reset index and create a new column 'unique_id'
        gdf.reset_index(drop=True, inplace=True)
        gdf['unique_id'] = range(len(gdf))
        # Create an empty DataFrame to store the result
        df_result = pd.DataFrame(columns=['xcoord', 'ycoord'])
        # Iterate over each row in the GeoDataFrame
        for _, row in gdf.iterrows():
            # Get the ID from the original GeoDataFrame
            original_id = row['unique_id']
            # Extract the coordinates from the geometry
            coordinates = row['geom'].coords
            # Create a DataFrame with the line segment coordinates
            df_segment = pd.DataFrame(coordinates, columns=['xcoord', 'ycoord'])
            # Add the original ID column
            df_segment['original_id'] = original_id
            # Append the segment DataFrame to the result DataFrame
            df_result = df_result.append(df_segment, ignore_index=True)
        # Join df_result and gdf based on unique_id and original_id
        merged_df = pd.merge(gdf, df_result, left_on=['unique_id'], right_on=['original_id'], how='left')
        return merged_df
    def close_conn(self):
        self.conn.close()
class osp_map:
    def __init__(self, start_location, project):
        self.start_location = start_location
        self.polygon_layer = folium.FeatureGroup(name='FSA BOUNDARY', show=True)
        self.point_layer1 = folium.FeatureGroup(name='POLES', show=False)
        self.line_layer = folium.FeatureGroup(name='RUNNING LINE', show=False)
        self.point_layer2 = folium.FeatureGroup(name='CABINETS', show=False)
        self.line_layer2 = folium.FeatureGroup(name='ASBUILT LINE', show=False)
        self.point_layer3 = folium.FeatureGroup(name='HOMES', show=False)

        # create a map object
        self.m = folium.Map(location=start_location, zoom_start=10)
        # Add a dark map tile layer
        folium.TileLayer('cartodbdark_matter').add_to(self.m)
        self.project = "NNPDC"#project.get()
    def create_banner(self, now):
        project = self.project
        # Define the banner HTML content
        banner_html = f'''
        <div style="position: fixed; top: 15px; left: 50%;
                     transform: translateX(-50%); z-index: 1000;
                     background-color: white; opacity: 0.8; padding: 4px;
                     text-align: center; font-weight: bold;">
            <h3>{project} | Updated on: {now} </h3>
        </div>
        '''

        self.m.get_root().html.add_child(folium.Element(banner_html))
    def create_polygon_layer(self, df):
        # Polygon Layer
        # To create the CSV go into QGIS. Run an "Extract vertices" on the polygon and then run "add geometry".
        df = df[df['build_status'] != 'CANCELLED']
        # Sort the data by id, vertex_part and vertex_part_ring
        df_sorted = df.sort_values(by=['id', 'vertex_part', 'vertex_part_ring'])
        # Group the data by id, vertex_part and vertex_part_ring and create a list of coordinates for each group with the corresponding fsa
        grouped = df_sorted.groupby(['id', 'vertex_part', 'vertex_part_ring', 'fsa'])[['ycoord', 'xcoord']].apply(
            lambda x: x.values.tolist())
        # Create a new DataFrame with the id, vertex_part, vertex_part_ring, fsa, and coordinate list for each group
        result = pd.DataFrame({'id': [group[0] for group in grouped.index],
                               'vertex_part': [group[1] for group in grouped.index],
                               'vertex_part_ring': [group[2] for group in grouped.index],
                               'fsa': [group[3] for group in grouped.index],
                               'coord': grouped.values})
        result = result.sort_values('id')  # sort the result by id
        # create a FeatureGroup for the child
        child_fg = folium.FeatureGroup(name="Child Feature Group").add_to(self.polygon_layer)
        # Iterate over the DataFrame rows and add each polygon to the child FeatureGroup
        for id in result['id'].unique():
            for vertex_part in result.loc[result['id'] == id, 'vertex_part'].unique():
                for vertex_part_ring in result.loc[
                    (result['id'] == id) & (result['vertex_part'] == vertex_part), 'vertex_part_ring'].unique():
                    boundary = result.loc[(result['id'] == id) & (result['vertex_part'] == vertex_part) & (
                            result['vertex_part_ring'] == vertex_part_ring), ['fsa', 'coord']]
                    boundary_popup = boundary.iloc[0]['fsa']
                    # Add polygon to the child FeatureGroup
                    # Append the first coordinate to the end of the list to close the polygon
                    polygon = boundary.iloc[0]['coord']
                    polygon.append(polygon[0])
                    folium.Polygon(locations=polygon, color='purple',
                                   weight=0.8,
                                   opacity=0.6,
                                   tooltip=boundary_popup).add_to(child_fg)

    def create_pole_layer(self, df_status, df2_1):
        # Pole Layer
        child_fg2 = folium.FeatureGroup(name="Child Feature Group").add_to(self.point_layer1)
        df2_1['njuns_tick'] = pd.to_numeric(df2_1['njuns_tick'].str[-7:], errors='coerce')
        df2_2 = df2_1.merge(df_status, left_on='njuns_tick', right_on='Tickets_Number', how='left')
        # df2 = df2_2[df2_2['attached'] != 'NO']
        # Extranious assignment to toggle between filtering out 'attached' = 'NO'
        df2 = df2_2
        df2 = df2.dropna(subset=['xcoord', 'ycoord'])  # Drop rows where either xcoord or ycoord is blank
        grouped = df2.dropna(subset=['id']).groupby(['id'])[['ycoord', 'xcoord']].apply(lambda x: x.values.tolist())
        # Stylization
        colors = {'NO NJUNS IN DATABASE': '#A51717', '0. TO BE SUBMITTED': 'grey', '1. SUBMITTED': '#FFAE00',
                  '2. ACCEPTED': '#F2FF00', '3. 3rd PTY INCOMPLETE': '#FF5757', '4. NTP': '#16FF00'}
        for id in df2['id'].unique():
            p_owner = df2.loc[df2['id'] == id, 'p_owner'].iloc[0]
            apb_route = df2.loc[df2['id'] == id, 'apb_route'].iloc[0]
            disp = df2.loc[df2['id'] == id, 'Disposition'].iloc[0]
            ntg_member = df2.loc[df2['id'] == id, 'PT_TICKET_NTG_PA'].iloc[0]
            attached = df2.loc[df2['id'] == id, 'attached'].iloc[0]
            njuns = "{:.0f}".format(df2.loc[df2['id'] == id, 'njuns_tick'].iloc[0])

            p_owner = str(p_owner)
            apb_route = str(apb_route)
            disp = str(disp)
            ntg_member = str(ntg_member)
            attached = str(attached)
            njuns = str(njuns)

            p_ownerp = p_owner.replace("`", "")
            apb_routep = apb_route.replace("`", "")
            dispp = disp.replace("`", "")
            ntg_memberp = ntg_member.replace("`", "")
            attachedp = attached.replace("`", "")
            njunsp = njuns.replace("`", "")

            tooltip = f"OWNER: {p_ownerp}<br>\n" \
                      f"FSA PART: {apb_routep}<br>\n" \
                      f"DISP: {dispp}<br>\n" \
                      f"NTG: {ntg_memberp}<br>\n" \
                      f"ATTACH: {attachedp}"

            coords = grouped.loc[id]
            lat = round(coords[0][0], 4)
            lon = round(coords[0][1], 4)
            for coord in coords:
                color = colors.get(disp, '#A51717')
                folium.CircleMarker(location=coord, tooltip=tooltip,
                                    radius=2,
                                    color='black', fill_color=color, fill_opacity=0.9, opacity=0.1).add_to(
                    child_fg2).add_child(folium.Popup(folium.Html(
                    f'LAT, LONG: {lat}, {lon}\n Ticket No: {njuns}')))  # .add_child(folium.Popup(folium.Html(f'<a href="https://www.google.com/maps/@?api=1&map_action=pano&viewpoint={lat},{lon}" onclick="open_street_view({coord})">Click here to open Street View</a>')))
        # Create the legend HTML content
        legend_html1 = '''
        <div id="legend1" style="position: fixed;
             bottom: 50px; right: 450px;
             z-index: 1000; padding: 10px;
             border: 1px solid grey;
             background-color: white;
             opacity: 0.8;
             font-size: 12px;">

             <span id="legend-toggle1" onclick="toggleLegend1()" style="cursor: pointer;"><i class="fa fa-minus-square"></i></span>
             <span style="font-weight:bold;">POLE LAYER</span>
             <br>
             <div id="legend-content1" style="display: block;">
        '''

        # Add legend items based on the color map
        for key, value in colors.items():
            legend_html1 += f'<div><span style="background-color:{value}; width:12px; height:12px; display:inline-block;"></span> {key}</div>'

        legend_html1 += '''
             </div>
        </div>
        '''
        # Create a folium element with the legend HTML
        legend1 = folium.Element(legend_html1)
        # Add the legend to the map
        self.m.get_root().html.add_child(legend1)
        # Add JavaScript code to toggle the legend visibility
        toggle_js1 = '''
        <script>
        function toggleLegend1() {
            var legendContent1 = document.getElementById('legend-content1');
            var legendToggle1 = document.getElementById('legend-toggle1');

            if (legendContent1.style.display === 'none') {
                legendContent1.style.display = 'block';
                legendToggle1.innerHTML = '<i class="fa fa-minus-square"></i>';
            } else {
                legendContent1.style.display = 'none';
                legendToggle1.innerHTML = '<i class="fa fa-plus-square"></i>';
            }
        }
        </script>
        '''

        # Add the JavaScript code to the map
        self.m.get_root().html.add_child(folium.Element(toggle_js1))

        # Add the JavaScript code to the map
        self.m.get_root().html.add_child(folium.Element(toggle_js1))
    def create_RL1_layer(self, df4):
        # RL Layer on type.
        line_coords = []
        line_index = 0
        df4.dropna(subset=['xcoord', 'ycoord'], inplace=True)
        child_fg4 = folium.FeatureGroup(name="Child Feature Group").add_to(self.line_layer)
        # Define a color map for the con_type property
        color_map = {'AER': 'blue', 'UNG': 'red', 'OHG': 'teal'}
        # Iterate over the rows of the data frame
        for i, row in df4.iterrows():
            con_type = row['placement']
            # apb_route = row['apb_route']
            # path = row['cable_type']
            # If the vertex_part_index is 0 and the line_coords list is not empty, add the line to the feature group
            if row['vertex_part_index'] == 0 and line_coords:
                # Use the color map to determine the color based on the con_type property
                color = color_map.get(con_type, 'grey')
                folium.PolyLine(locations=line_coords, color=color, weight=4, opacity=0.7).add_to(child_fg4)
                line_index += 1
                line_coords = []
            # Add the current point to the line coordinates
            line_coords.append([row['ycoord'], row['xcoord']])
        # If there are still remaining line coordinates in the list, add the last line to the feature group
        if line_coords:
            tooltip = f"TYPE: {con_type}<br>\n" \
                # f"FSA PART: {apb_route}<br>\n" \
            # f"PATH: {path}<br>\n"
            # Use the color map to determine the color based on the con_type property
            color = color_map.get(con_type, 'grey')
            folium.PolyLine(locations=line_coords, tooltip=tooltip, color=color, weight=5, opacity=0.7).add_to(
                child_fg4)

        # Create the legend HTML content
        legend_html2 = '''
        <div id="legend2" style="position: fixed;
             bottom: 50px; right: 240px;
             z-index: 1000; padding: 10px;
             border: 1px solid grey;
             background-color: white;
             opacity: 0.8;
             font-size: 12px;">

             <span id="legend-toggle2" onclick="toggleLegend2()" style="cursor: pointer;"><i class="fa fa-minus-square"></i></span>
             <span style="font-weight:bold;">RUNNING LINE: SPAN TYPE</span>
             <br>
             <div id="legend-content2" style="display: block;">
        '''

        # Add legend items based on the color map
        for key, value in color_map.items():
            legend_html2 += f'<div><span style="background-color:{value}; width:12px; height:12px; display:inline-block;"></span> {key}</div>'

        legend_html2 += '''
             </div>
        </div>
        '''

        # Create a folium element with the legend HTML
        legend2 = folium.Element(legend_html2)

        # Add the legend to the map
        self.m.get_root().html.add_child(legend2)

        # Add JavaScript code to toggle the legend visibility
        toggle_js2 = '''
        <script>
        function toggleLegend2() {
            var legendContent2 = document.getElementById('legend-content2');
            var legendToggle2 = document.getElementById('legend-toggle2');

            if (legendContent2.style.display === 'none') {
                legendContent2.style.display = 'block';
                legendToggle2.innerHTML = '<i class="fa fa-minus-square"></i>';
            } else {
                legendContent2.style.display = 'none';
                legendToggle2.innerHTML = '<i class="fa fa-plus-square"></i>';
            }
        }
        </script>
        '''

        # Add the JavaScript code to the map
        self.m.get_root().html.add_child(folium.Element(toggle_js2))

    def create_RL2_status_layer(self, df5):
        # RL Layer on Build status
        line_coords = []
        line_index = 0
        df5.dropna(subset=['xcoord', 'ycoord'], inplace=True)
        child_fg5 = folium.FeatureGroup(name="Child Feature Group").add_to(self.line_layer2)
        # Define a color map for the con_type property
        color_map = {'ASBUILT': 'green', 'CON': 'green', 'PENDING': 'yellow', 'RTC': 'orange', 'BUILT': 'green'}
        # Iterate over the rows of the data frame
        for i, row in df5.iterrows():
            # If the vertex_part_index is 0 and the line_coords list is not empty, add the line to the feature group
            if row['vertex_part_index'] == 0 and line_coords:
                # Use the color map to determine the color based on the con_type property
                color = color_map.get(asbuilt, 'yellow')
                folium.PolyLine(locations=line_coords, color=color, weight=5, opacity=0.7).add_to(child_fg5)
                line_index += 1
                line_coords = []
            # Add the current point to the line coordinates
            line_coords.append([row['ycoord'], row['xcoord']])
            asbuilt = row['con_status']
        # If there are still remaining line coordinates in the list, add the last line to the feature group
        if line_coords:
            # Use the color map to determine the color based on the con_type property
            color = color_map.get(asbuilt, 'yellow')
            folium.PolyLine(locations=line_coords, color=color, weight=4, opacity=0.7).add_to(child_fg5)

        # Create the legend HTML content
        legend_html3 = '''
        <div id="legend3" style="position: fixed;
             bottom: 50px; right: 50px;
             z-index: 1000; padding: 10px;
             border: 1px solid grey;
             background-color: white;
             opacity: 0.8;
             font-size: 12px;">

             <span id="legend-toggle3" onclick="toggleLegend3()" style="cursor: pointer;"><i class="fa fa-minus-square"></i></span>
             <span style="font-weight:bold;">RUNNING LINE: STATUS</span>
             <br>
             <div id="legend-content3" style="display: block;">
        '''

        # Add legend items based on the color map
        color_map_LEG = {'PENDING': 'yellow', 'RTC': 'orange', 'BUILT': 'green'}
        for key, value in color_map_LEG.items():
            legend_html3 += f'<div><span style="background-color:{value}; width:12px; height:12px; display:inline-block;"></span> {key}</div>'

        legend_html3 += '''
             </div>
        </div>
        '''

        # Create a folium element with the legend HTML
        legend3 = folium.Element(legend_html3)

        # Add the legend to the map
        self.m.get_root().html.add_child(legend3)

        # Add JavaScript code to toggle the legend visibility
        toggle_js3 = '''
        <script>
        function toggleLegend3() {
            var legendContent3 = document.getElementById('legend-content3');
            var legendToggle3 = document.getElementById('legend-toggle3');

            if (legendContent3.style.display === 'none') {
                legendContent3.style.display = 'block';
                legendToggle3.innerHTML = '<i class="fa fa-minus-square"></i>';
            } else {
                legendContent3.style.display = 'none';
                legendToggle3.innerHTML = '<i class="fa fa-plus-square"></i>';
            }
        }
        </script>
        '''

        # Add the JavaScript code to the map
        self.m.get_root().html.add_child(folium.Element(toggle_js3))

    def create_cabinet_layer(self, df3):
        # Cabinet Layer
        child_fg3 = folium.FeatureGroup(name="Child Feature Group").add_to(self.point_layer2)
        df3 = df3.dropna(subset=['xcoord', 'ycoord'])  # Drop rows where either xcoord or ycoord is blank
        grouped = df3.dropna(subset=['id_0']).groupby(['id_0'])[['ycoord', 'xcoord']].apply(lambda x: x.values.tolist())
        # Stylization
        colors = {'--': 'grey'}
        # Add points
        for id in df3['id_0'].unique():
            name = df3.loc[df3['id_0'] == id, 'name'].iloc[0]
            type_cab = df3.loc[df3['id_0'] == id, 'type'].iloc[0]
            tooltip = f"NAME: {name}<br>\n" \
                      f"TYPE: {type_cab}<br>\n"
            coords = grouped.loc[id]
            lat = round(coords[0][0], 4)
            lon = round(coords[0][1], 4)
            for coord in coords:
                folium.CircleMarker(location=coord, tooltip=tooltip,
                                    radius=9,
                                    color="purple", fill_color="white", fill_opacity=1, opacity=0.5).add_to(
                    child_fg3).add_child(folium.Popup(folium.Html(
                    f'LAT, LONG: {lat}, {lon}')))  # .add_child(folium.Popup(folium.Html(f'<a href="https://www.google.com/maps/@?api=1&map_action=pano&viewpoint={lat},{lon}" onclick="open_street_view({coord})">Click here to open Street View</a>')))
    def create_home_layer(self, df6):
        # Cabinet Layer
        child_fg6 = folium.FeatureGroup(name="Child Feature Group").add_to(self.point_layer3)
        df6 = df6.dropna(subset=['xcoord', 'ycoord'])  # Drop rows where either xcoord or ycoord is blank
        grouped = df6.dropna(subset=['id']).groupby(['id'])[['ycoord', 'xcoord']].apply(lambda x: x.values.tolist())
        # Stylization
        # Add points
        for id in df6['id'].unique():
            # name = df6.loc[df6['id_0'] == id, 'name'].iloc[0]
            # type_cab = df6.loc[df6['id_0'] == id, 'type'].iloc[0]
            tooltip = 0  # f"NAME: {name}<br>\n" \
            # f"TYPE: {type_cab}<br>\n"
            coords = grouped.loc[id]
            lat = round(coords[0][0], 4)
            lon = round(coords[0][1], 4)
            # Create a custom icon with a square shape
            for coord in coords:
                folium.CircleMarker(location=coord,
                                    radius=2,
                                    fill_color='black',
                                    color='#4682b4', fill_opacity=0.9).add_to(child_fg6).add_child(folium.Popup(
                    folium.Html(
                        f'LAT, LONG: {lat}, {lon}')))  # .add_child(folium.Popup(folium.Html(f'<a href="https://www.google.com/maps/@?api=1&map_action=pano&viewpoint={lat},{lon}" onclick="open_street_view({coord})">Click here to open Street View</a>')))'''
    def compile_layers(self):
        # Add layers to map
        self.m.add_child(self.polygon_layer)
        self.m.add_child(self.point_layer1)
        self.m.add_child(self.point_layer2)
        self.m.add_child(self.line_layer)
        self.m.add_child(self.line_layer2)
        self.m.add_child(self.point_layer3)
    """def add_searchbar(self, df_status, df2_1):
        search_bar = '''
        <div style="position: fixed; top: 10px; left: 10px; z-index: 1000; background-color: white; padding: 5px;">
            <input type="text" id="search-input" placeholder="Search...">
            <input type="button" value="Search" onclick="searchFunction()">
        </div>
        '''
        self.m.get_root().html.add_child(folium.Element(search_bar))
        js_code = '''
        <script>
            function searchFunction() {
                var searchText = document.getElementById('search-input').value.toLowerCase();

                // Reset marker styles
                var markers = document.getElementsByClassName('marker');
                for (var i = 0; i < markers.length; i++) {
                    markers[i].style.color = 'blue';
                }

                // Highlight matching markers
                var rows = document.getElementsByClassName('row');
                for (var i = 0; i < rows.length; i++) {
                    var apb_route = rows[i].getAttribute('data-apb-route').toLowerCase();
                    var marker = document.getElementById('marker-' + i);

                    if (apb_route.includes(searchText)) {
                        marker.style.color = 'yellow';
                    }
                }
            }
        </script>
        '''
        self.m.get_root().html.add_child(folium.Element(js_code))
        df2_1['njuns_tick'] = pd.to_numeric(df2_1['njuns_tick'].str[-7:], errors='coerce')
        df2 = df2_1.merge(df_status, left_on='njuns_tick', right_on='Tickets_Number', how='left')
        df2 = df2.dropna(subset=['xcoord', 'ycoord'])  # Drop rows where either xcoord or ycoord is blank
        grouped = df2.dropna(subset=['id']).groupby(['id'])[['ycoord', 'xcoord']].apply(lambda x: x.values.tolist())
        for index, row in grouped.iterrows():
            apb_route = row['apb_route']
            latitude = row['latitude']
            longitude = row['longitude']

            popup = folium.Popup(f'APB Route: {apb_route}', max_width=300)
            icon = folium.Icon(color='blue')

            marker = folium.Marker(location=[latitude, longitude], popup=popup, icon=icon)
            marker.add_to(self.m)

            marker_id = f'marker-{index}'
            marker._id = marker_id  # Assign a unique ID to each marker element

            row_html = f'<div class="row" data-apb-route="{apb_route}">{index}</div>'
            self.m.get_root().html.add_child(folium.Element(row_html))"""
    def add_checkboxes(self):
        # Create checkboxes
        folium.plugins.MarkerCluster(name='Polygon Layer', control=False).add_to(self.m)
        folium.plugins.MarkerCluster(name='Point Layer 1', control=False).add_to(self.m)
        folium.plugins.MarkerCluster(name='Line Layer', control=False).add_to(self.m)
        folium.plugins.MarkerCluster(name='Point Layer 2', control=False).add_to(self.m)
        folium.plugins.MarkerCluster(name='Line Layer 3', control=False).add_to(self.m)
        folium.plugins.MarkerCluster(name='Point Layer 3', control=False).add_to(self.m)
        # Add layer control
        folium.LayerControl(collapsed=True).add_to(self.m)
        # Add a button to zoom to the start location
        LocateControl().add_to(self.m)

        # Enable spatial indexing and Enable hardware acceleration
        self.m.options.update(
            {'tile_size': 512, 'world_copy_jump': True, 'preferCanvas': True, 'location': self.start_location})
    def save_map(self, now):
        # Display the map
        project = self.project
        name = f"{project}_MAP_{now}"
        self.m.save(f'MAPS\{name}.html')
class TestGenerateCSVs:
    def __init__(self, entry_fields2, project):
        self.entry_fields = entry_fields2
        self.project = project
    def generate_CSVs(self):
        start_time1 = time.time()
        now1 = datetime.datetime.now()
        print(now1)
        print(self.entry_fields[0].get(), self.entry_fields[2].get(), self.entry_fields[3].get(),self.entry_fields[4].get())
        project = create_csvs(self.entry_fields[0].get(), self.entry_fields[2].get(), self.entry_fields[3].get(), self.entry_fields[4].get(), self.project)
        project_rl = project.get_project_lld_rl()
        print('Success: rl_func')
        project_poles = project.get_project_lld_poles()
        print('Success: poles_func')
        project_homes = project.get_project_lld_homes()
        print('Success: homes_func')
        project_cabinets = project.get_project_lld_cabinets()
        print('Success: cabinets_func')
        project_polygon = project.get_project_lld_polygon()
        print('Success: polygon_func')
        project.close_conn()
        print('Success: close_conn')
        # Save the result DataFrame as a CSV file
        project_name = self.project.get()
        csv_project_RL = f'MAP_CSVs/{project_name}_RL.csv'
        project_rl.to_csv(csv_project_RL, index=False)
        csv_project_Homes = f'MAP_CSVs/{project_name}_HOMES.csv'
        project_homes.to_csv(csv_project_Homes, index=False)
        csv_project_Cabinets = f'MAP_CSVs/{project_name}_CABINETS.csv'
        project_cabinets.to_csv(csv_project_Cabinets, index=False)
        csv_project_Poles = f'MAP_CSVs/{project_name}_POLES.csv'
        project_poles.to_csv(csv_project_Poles, index=False)
        csv_project_Polygon = f'MAP_CSVs/{project_name}_POLYGON.csv'
        project_polygon.to_csv(csv_project_Polygon)
        print("CSV files saved successfully.")
        end_time1 = time.time()
        runtime1 = end_time1 - start_time1
        print("Runtime 1:", runtime1, "seconds")
class GenerateMap:
    def __init__(self, entry_fields, project):
        self.project = project
        self.entry_fields = entry_fields
    def generate_maps(self):
        all_files_exist = True
        entry_paths = [entry.get() for entry in self.entry_fields]
        for path in entry_paths:
            matching_files = glob.glob(path)
            if matching_files:
                for file_path in matching_files:
                    file_name = os.path.basename(file_path)
                    if "POLYGON" in file_path:
                        polygons = file_path
                    elif "RL" in file_path:
                        rls = file_path
                    elif "POLES" in file_path:
                        poles = file_path
                    elif "CABINETS" in file_path:
                        cabinets = file_path
                    elif "HOMES" in file_path:
                        homes = file_path
                    elif "STATUS" in file_path:
                        status = file_path
            else:
                print("File doesn't exist:", path)
                all_files_exist = False
        start_time2 = time.time()
        now2 = datetime.datetime.now()
        print(now2)
        start_location = [37.96229449, -76.75557638]
        if all_files_exist:
            now = datetime.date.today()
            om = osp_map(start_location, self.project)
            print("pass 01")
            om.create_banner(now)
            print("pass 02")
            om.create_polygon_layer(pd.read_csv(polygons))
            print("pass 03")
            om.create_pole_layer(pd.read_csv(status), pd.read_csv(poles))
            print("pass 04")
            om.create_RL1_layer(pd.read_csv(rls))
            print("pass 05")
            om.create_RL2_status_layer(pd.read_csv(rls))
            print("pass 06")
            om.create_cabinet_layer(pd.read_csv(cabinets))
            print("pass 07")
            om.create_home_layer(pd.read_csv(homes))
            print("pass 08")
            om.compile_layers()
            print("pass 09")
            om.add_checkboxes()
        #om.add_searchbar(pd.read_csv(status), pd.read_csv(poles))
            om.save_map(now)
        print('ALL MAP FUNCTIONS RAN.')
        end_time2 = time.time()
        runtime2 = end_time2 - start_time2
        print("Runtime 2:", runtime2, "seconds")
class TabContentFrame(tk.Frame):
    def __init__(self, parent, text):
        tk.Frame.__init__(self, parent)
        self.parent = parent
        self.text = text
        self.parent.bind("<<NotebookTabChanged>>", self.on_tab_changed)
        self.loaded_widgets = {}
    def on_tab_changed(self, event):
        if self.parent.select() == self:
            self.load_widgets()
    def load_widgets(self):
        if self.text == "GENERATE MAP":
            self.add_widgets_tab1()
        elif self.text == "GENERATE LAYER CSVs":
            self.add_widgets_tab2()
        elif self.text == "DOCUMENTATION":
            self.add_widgets_tab3()
    def add_widgets_tab1(self):
        def toggle_button_state():
            if enable_button.get():
                button7.config(state=tk.NORMAL)
            else:
                button7.config(state=tk.DISABLED)
        if "GENERATE MAP" not in self.loaded_widgets:
            label1 = ttk.Label(self, text="GENERATE HTML MAP", font=("Arial", 18))
            label1.pack(padx=12, pady=7)
            label0 = ttk.Label(self, text="PLEASE TYPE PROJECT NAME:  ")
            entry0 = tk.Entry(self)
            entry1 = tk.Entry(self)
            entry2 = tk.Entry(self)
            entry3 = tk.Entry(self)
            entry4 = tk.Entry(self)
            entry5 = tk.Entry(self)
            entry6 = tk.Entry(self)

            label0.place(relx=0.5, rely=0.1, anchor="e")
            entry0.place(relx=0.5, rely=0.1, anchor="w")
            entry1.place(relx=0.2, rely=0.2, relwidth=0.7)
            entry2.place(relx=0.2, rely=0.3, relwidth=0.7)
            entry3.place(relx=0.2, rely=0.4, relwidth=0.7)
            entry4.place(relx=0.2, rely=0.5, relwidth=0.7)
            entry5.place(relx=0.2, rely=0.6, relwidth=0.7)
            entry6.place(relx=0.2, rely=0.7, relwidth=0.7)

            entry0.insert(0, 'NNPDC')
            entry1.insert(0, 'MAP_CSVs\\*_POLYGON.csv')
            entry2.insert(0, 'MAP_CSVs\\*_POLES.csv')
            entry3.insert(0, 'MAP_CSVs\\*_RL.csv')
            entry4.insert(0, 'MAP_CSVs\\*_CABINETS.csv')
            entry5.insert(0, 'MAP_CSVs\\*_HOMES.csv')
            entry6.insert(0, 'MAP_CSVs\\*_STATUS.csv')

            label01 = tk.Label(self, text="POLYGONS")
            label02 = tk.Label(self, text="POLES")
            label03 = tk.Label(self, text="RUNNING LINE")
            label04 = tk.Label(self, text="CABINETS")
            label05 = tk.Label(self, text="HOMES")
            label06 = tk.Label(self, text="STATUS")
            text07 = tk.Text(self, font=("Arial", 11))

            label01.place(relx=0.2, rely=0.15)
            label02.place(relx=0.2, rely=0.25)
            label03.place(relx=0.2, rely=0.35)
            label04.place(relx=0.2, rely=0.45)
            label05.place(relx=0.2, rely=0.55)
            label06.place(relx=0.2, rely=0.65)
            text07.tag_configure("center", justify="center")
            text07.config(height=3, wrap=tk.WORD)
            text07.pack(pady=10)
            text07.place(relx=0.5, rely=0.80, relwidth=0.65, anchor="center")
            text07.insert(tk.END,
                          "PLEASE ENSURE ALL PATH NAMES ARE CORRECT.\nDO NOT PRESS GENERATE MAP MORE THAN ONCE.", "center")
            text07.configure(state=tk.DISABLED)



            project_name = entry0.get()
            entry_fields = [entry1, entry2, entry3, entry4, entry5, entry6]
            generate_map_instance = GenerateMap(entry_fields, project_name)
            self.entry_fields = entry_fields

            button1 = tk.Button(self, text="Choose File", command=lambda: self.open_file_dialog(entry1))
            button2 = tk.Button(self, text="Choose File", command=lambda: self.open_file_dialog(entry2))
            button3 = tk.Button(self, text="Choose File", command=lambda: self.open_file_dialog(entry3))
            button4 = tk.Button(self, text="Choose File", command=lambda: self.open_file_dialog(entry4))
            button5 = tk.Button(self, text="Choose File", command=lambda: self.open_file_dialog(entry5))
            button6 = tk.Button(self, text="Choose File", command=lambda: self.open_file_dialog(entry6))

            button1.place(relx=0.0, rely=0.45, anchor="e", in_=entry1, x=-8)
            button2.place(relx=0.0, rely=0.45, anchor="e", in_=entry2, x=-8)
            button3.place(relx=0.0, rely=0.45, anchor="e", in_=entry3, x=-8)
            button4.place(relx=0.0, rely=0.45, anchor="e", in_=entry4, x=-8)
            button5.place(relx=0.0, rely=0.45, anchor="e", in_=entry5, x=-8)
            button6.place(relx=0.0, rely=0.45, anchor="e", in_=entry6, x=-8)

            def disable_button():
                button7.config(state=tk.DISABLED)
                button_state = button7.cget('state')
                print(button_state)
                entry_paths = [entry.get() for entry in self.entry_fields]
                all_files_exist = True  # Flag to track file existence
                err_texts = []  # List to store error messages
                for path in entry_paths:
                    matching_files = glob.glob(path)
                    print(matching_files)
                    if matching_files:
                        print("File exists: "+ path)
                    else:
                        all_files_exist = False
                        err_text = "File doesn't exist: " + path
                        err_texts.append(err_text)  # Add the error message to the list

                if not all_files_exist:
                    text07.configure(state=tk.NORMAL)
                    err_text = "\n".join(err_texts)  # Join the error messages with newline characters
                    final_err = "MAP WAS NOT CREATED!!! \n THE FOLLOWING FILES WERE NOT FOUND (SCROLL DOWN FOR FULL LIST): \n" + err_text
                    text07.delete(1.0, tk.END)  # Clear the existing content
                    text07.tag_configure("center", justify="center")
                    text07.tag_configure("red", foreground="red")
                    text07.insert(tk.END, final_err, "center red")
                    text07.configure(state=tk.DISABLED)
                elif all_files_exist:
                    generate_map_instance.generate_maps()

            button7 = ttk.Button(self, text="GENERATE MAP", command=disable_button)
            button7.place(relx=0.5, rely=0.925, anchor="s")
            # Create the checkbox to enable/disable the button
            enable_button = tk.IntVar(value=0)  # Set the default value to 1 (checked)
            checkbox = tk.Checkbutton(self, text="Enable Button", variable=enable_button, command=toggle_button_state)
            checkbox.place(relx=0.5, rely=0.97, anchor="s")

            self.loaded_widgets["GENERATE MAP"] = (
                label1, entry0, entry1, entry2, entry3, entry4, entry5,
                button1, button2, button3, button4, button5, button6, button7, label01, label02, label03,
                label04, label05, label06, text07
            )
    def add_widgets_tab2(self):
        def toggle_password_visibility():
            if show_password.get():
                # Show the password
                entry5.config(show='')
            else:
                # Hide the password
                entry5.config(show='*')

        def toggle_button_state():
            if enable_button.get():
                button1.config(state=tk.NORMAL)
            else:
                button1.config(state=tk.DISABLED)

        if "GENERATE LAYER CSVs" not in self.loaded_widgets:
            label0 = ttk.Label(self, text="GENERATE LAYER CSVs", font=("Arial", 18))
            label0.pack(padx=12, pady=7)
            label00 = ttk.Label(self, text="PLEASE TYPE PROJECT NAME:  ")
            entry0 = tk.Entry(self)
            entry1 = tk.Entry(self)
            entry2 = tk.Entry(self)
            entry3 = tk.Entry(self)
            entry4 = tk.Entry(self)
            entry5 = tk.Entry(self)

            # Create the "Show Password" checkbox
            show_password = tk.IntVar(value=1)
            show_password_checkbox = tk.Checkbutton(self, text='Show Password', variable=show_password,
                                                    command=toggle_password_visibility)
            show_password_checkbox.place(relx=0.2, rely=0.65)

            label00.place(relx=0.5, rely=0.1, anchor="e")
            entry0.place(relx=0.5, rely=0.1, anchor="w")
            entry1.place(relx=0.2, rely=0.2, relwidth=0.7)
            entry2.place(relx=0.2, rely=0.3, relwidth=0.7)
            entry3.place(relx=0.2, rely=0.4, relwidth=0.7)
            entry4.place(relx=0.2, rely=0.5, relwidth=0.7)
            entry5.place(relx=0.2, rely=0.6, relwidth=0.7)

            entry0.insert(0, 'PLEASE TYPE PROJECT NAME')
            entry1.insert(0, 'PLEASE TYPE THE DOMAIN')
            entry3.insert(0, '***DATABASE***')
            entry4.insert(0, '***USER NAME***')
            entry5.insert(0, '***PASSWORD***')

            entry_fields2 = [entry1, entry2, entry3, entry4, entry5]
            generate_csvs_instance = TestGenerateCSVs(entry_fields2, entry0)

            label1 = tk.Label(self, text="HOSTNAME: ")
            label2 = tk.Label(self, text="PORT: ")
            label3 = tk.Label(self, text="DATABASE: ")
            label4 = tk.Label(self, text="USER NAME: ")
            label5 = tk.Label(self, text="PASSWORD: ")
            text7 = tk.Text(self, font=("Arial", 11))

            label1.place(relx=0.0, rely=0.2, anchor="e", x=-8, in_=entry1)
            label2.place(relx=0.0, rely=0.3, anchor="e", x=-8, in_=entry2)
            label3.place(relx=0.0, rely=0.4, anchor="e", x=-8, in_=entry3)
            label4.place(relx=0.0, rely=0.5, anchor="e", x=-8, in_=entry4)
            label5.place(relx=0.0, rely=0.6, anchor="e", x=-8, in_=entry5)
            text7.tag_configure("center", justify="center")
            text7.config(height=3, wrap=tk.WORD)
            text7.pack(pady=10)
            text7.place(relx=0.5, rely=0.80, relwidth=0.65, anchor="center")
            text7.insert(tk.END,
                          "PLEASE ENSURE ALL PATH NAMES ARE CORRECT.\nDO NOT PRESS GENERATE MAP MORE THAN ONCE.", "center")
            text7.configure(state=tk.DISABLED)


            def disable_button():
                button1.config(state=tk.DISABLED)
                try:
                    generate_csvs_instance.generate_CSVs()
                    text7.delete("1.0", tk.END)
                    message = "CSVs SUCCESSFULLY CREATED"
                    text7.configure(state=tk.NORMAL)
                    text7.insert(tk.END, message, "center red")
                    text7.configure(state=tk.DISABLED)
                except Exception as e:
                    error_message = "CSVs WERE NOT CREATED!!!\nPLEASE SEE BELOW ERROR:\n" + str(e)
                    text7.configure(state=tk.NORMAL)
                    text7.delete("1.0", tk.END)  # Clear existing content
                    text7.tag_configure("center", justify="center")
                    text7.tag_configure("red", foreground="red")
                    text7.insert(tk.END, error_message, "center red")
                    text7.configure(state=tk.DISABLED)

            button1 = ttk.Button(self, text="GENERATE LAYER CSVs", command=disable_button)#, command=print_values_instance.print_values)
            button1.place(relx=0.5, rely=0.925, anchor="s")

            # Create the checkbox to enable/disable the button
            enable_button = tk.IntVar(value=0)  # Set the default value to 1 (checked)
            checkbox = tk.Checkbutton(self, text="Enable Button", variable=enable_button, command=toggle_button_state)
            checkbox.place(relx=0.5, rely=0.97, anchor="s")

            self.loaded_widgets["GENERATE LAYER CSVs"] = (
                label0, entry0, entry1, entry2, entry3, entry4, entry5,
                button1, label1, label2, label3, label4, label5
            )
    def add_widgets_tab3(self):
        if "DOCUMENTATION" not in self.loaded_widgets:
            label001 = ttk.Label(self, text="Documentation:", font=("Arial", 15))
            label001.pack(padx=10, pady=10)
            text001 = ttk.Text(self, font=("Arial", 11))
            text001.insert('0.1', "HTML MAPPING V2.2 (7.13.23)\n\n"
                                  "001 | In order to generate map first generate the layer CSVs.\n"
                                  "002 | Second ensure that a new NNPDC_STATUS.csv is downloaded.\n"
                                  "003 | This should located in the OSP Tickets Utility tab in the power BI dashboard. \n"
                                  "004 | Lastly, navigate to the Generate Map Tab and press generate maps.\n"
                                  "005 | When generating CSVs, ensure that the database credentials are correct.\n"
                                  "006 | When generating the map, ensure that the file locations are correct.\n"
                                  "007 |\n"
                                  "008 | !!!  HTML MAPPING V2.2 only works on the NNPDC database. \n"
                                  "010 |\n"
                                  "011 | Please direct all questions to egueck@allpointsbroadband.com.\n"


                           )
            text001.place(rely=0.5, relx=0.5, relwidth=0.75, relheight=0.75, anchor="center")
            text001.configure(state=tk.DISABLED)
            self.loaded_widgets["DOCUMENTATION"] = (label001, text001)

    def open_file_dialog(self, entry):
        root.filename = filedialog.askopenfilename(
            initialdir="/",
            title="Select A File",
            filetypes=(
                ("CSV files", "*.csv"),
                ("All files", "*.*"),
                ("Folder", "*")
            )
        )
        chosen_file = root.filename
        entry.delete(0, 'end')
        entry.insert(0, chosen_file)
class MyApp:
    def __init__(self, master):
        self.master = master
        self.master.geometry("800x800")
        root.minsize(775, 750)
        self.master.title("APB MAPING")
        self.style = Style(theme='darkly')

        # Create frames
        self.header_frame = HeaderFrame(self.master)
        self.body_frame = BodyFrame(self.master)
        self.footer_frame = FooterFrame(self.master)

        # Create notebook with three tabs
        self.notebook = ttk.Notebook(self.body_frame)
        self.tab1 = TabContentFrame(self.notebook, text="GENERATE MAP")
        self.tab2 = TabContentFrame(self.notebook, text="GENERATE LAYER CSVs")
        self.tab3 = TabContentFrame(self.notebook, text="DOCUMENTATION")
        self.notebook.add(self.tab1, text="GENERATE MAP")
        self.notebook.add(self.tab2, text="GENERATE LAYER CSVs")
        self.notebook.add(self.tab3, text="DOCUMENTATION")
        self.notebook.pack(fill="both", expand=True)

        # Bind the event to the notebook tab change
        self.notebook.bind("<<NotebookTabChanged>>", self.on_tab_changed)
    def on_tab_changed(self, event):
        current_tab = self.notebook.tab(self.notebook.select(), "text")
        if current_tab == "GENERATE MAP":
            self.tab1.load_widgets()
        elif current_tab == "GENERATE LAYER CSVs":
            self.tab2.load_widgets()
        elif current_tab == "DOCUMENTATION":
            self.tab3.load_widgets()
class HeaderFrame(tk.Frame):
    def __init__(self, master):
        super().__init__(master, height=100, borderwidth=2, relief="ridge")
        self.pack(side="top", fill="x")
        tk.Label(self, text="APB MAPPING TOOL", font=("Arial", 16), bg="#333", fg="#fff").pack(pady=10)
class BodyFrame(tk.Frame):
    def __init__(self, master):
        super().__init__(master, borderwidth=2, relief="groove", width=800, height=450)
        self.pack(side="top", fill="both", expand=True)
class FooterFrame(tk.Frame):
    def __init__(self, master):
        super().__init__(master, height=50, borderwidth=2, relief="ridge")
        self.pack(side="bottom", fill="x")
        tk.Label(self, text="APB APPLICATION | APB MAPPING v2.2 | 07.13.2023 | ETHAN GUECK", font=("Arial", 11), bg="#333", fg="#fff").pack(pady=10)
root = tk.Tk()
class IconData:
    def __init__(self):
        self.icon_data = b'\x00\x00\x01\x00\x06\x00\x10\x0f\x00\x00\x00\x00 \x00\xe0\x02\x00\x00f\x00\x00\x00\x18\x17\x00\x00\x00\x00 \x00)\x05\x00\x00F\x03\x00\x00 \x1e\x00\x00\x00\x00 \x00\xb6\x07\x00\x00o\x08\x00\x000-\x00\x00\x00\x00 \x00\xa4\r\x00\x00%\x10\x00\x00@<\x00\x00\x00\x00 \x00g\x14\x00\x00\xc9\x1d\x00\x00\x80x\x00\x00\x00\x00 \x00\x945\x00\x0002\x00\x00\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\x00\x00\x00\x0f\x08\x06\x00\x00\x00\xedsO/\x00\x00\x02\xa7IDATx\x9cu\x93MhTW\x18\x86\x9fs\xee\xcc\xc411\x13m\x12\x15\x8b\x90\x14\x8c\x98*\x8d\x1a$&\x1a\x05\xd3\xa0XEqa5\xa8\x88\x06,\xad-\x82\x88\x82\xe9\xc2b]\x14\x14\x03"\x12E\xb4M\xbb\xe8\xc2E[\xc5E5\x10\n\xc5\xa2\xb4R\x7f\xc1$\xa8\xa9\xff\xe6o\xbcw\xec\xdc\xf3\xba\xb8N4\xa8\xcf\xee\x1c\xbe\xf3\x1c\xf8\xbe\xf73\x92\xc4K$\xe1\x9c\xc3\xf3<\xdeF\x18\x86Xk1\xc6\x0c\xdf\x99\xd7\x059\x86\x82\x80\xdfNw\xd0y\xe3&1\x0c\x0bfLcq\xc3\\\xe2\xb1\xbc7\xa46\xf7\xb3$\xee\r\x0e\xf0\xed\xc1c,\xfax=\xeb\x9aw\xf2\xa4$\x9f\xa0 \xc1\xca\xa6\xed\xd44n\xa5\xb5\xed{\xd2\xc1\xd3\xe1\xfaW\x02\xc0\x18\xc3\x9e\xe3\xed\xec\xf2\xaf\xd2]QDY\xfdG\x8c\x9d\xf1\x01\x95\xf3\xaa\xa9\xae\x9fL\xf9\xcc\x0b\\\xc9|N\xdb\x8f\xed\x18c\x86\x05&\x0cCYk\xb9\xdd{\x9f\x86O6q\x7fK\r}eIvO\x9c\xc3\xd2\xd2r\xacM\xd2\xff\xe4\x1bz\xc2\xef\xb8\xd21\x95_\x8e\xcf\xe6\xcf\xb3\x87H\x15\x8c\x89$\xd9lV\x92\xb4\xaf\xf5\xa8\x12E\x95\x9a\xd2\xfc\x85\x9a\xaf\x9d\xd3\xe3\x8c\xaf\x1cC\xc1\x1d\xfd\xde\xb5Q\x8b\xd67*/5G\'\xdbOI\x92\xfe\xcffe$i`(M\xd3\xd6}\xe4\x17\xbfOYE\x15_-\xaf\xa2\xb48N\xd6\t\x101k\xf9\xa3o\x80%\xbf\x1e!v\xe965n\x0c?\xef\xddM"/\x11\xf5\xc0\xf73<\x8f\x15\x92)\xac\xe0R\xaf\xc7\x83A?\xea\x0b\x02\x13I\xd2<ba\xd5\x87\xd47\xd6\x91\xc9\x8f\xe3\x07\x19\x8c1\xd8\xd09\xc6\x97\x8c\xa3<\xe5s\xfa\xf0\x0e\x82\xde\xb3\xe8=\x87B\x87g-1\xe3\x11\x86\x8e\xe7=I\x1e\xb5vp~\xf3~\xea\x92%\x14\x15\x15F\xb9\xe0e\n6\xac]\xc5h\xcf#5%\xc9\xfe\xbb\xd7\xf8\'\xe8g0\xe8"\x08\xefq\xea\xc2S\xb6\x1d\xeda\xa07\xc1\xa8\x828\x9f\xaeY\x1eM\xc0\x98(H\x02\xe4\x1c\xab\xbfl\xc1.\x9e\x85\xeb\xcb\x90\xfa\xef:kVts\xb7\xff/\xda\x8f,\xe3\xa1f\xd2\xef\xa7\xa9\x1b\xdb\xcd\xb1\x03-8\tk\x0cHR\xe8\x9c$\xe9\xe2\xadn\xad\xd8\xf6\xb5\xc6\x95\xd7*9a\xae~\xea\xfcL-?T*^Z\xad\t\xd3\xe6kY\xf3\x1e]\xbeyG\xce9\x85a\xf4f8\xca\x920\xc6\xe0\x0f=\xa3\xf3\xe2\xdf\xb4\x9d8C\xb2\xf8_\xd2\xcf2\xe4\xbbZ665P;{:^,1"\xca#v!\'\xc9q\xe3V\x17\xf1X\x82\xb2\xc9\x93xW\xcd\x1b\xcb\x14m\xa40\x06\xac\xb5\x008\xe7\x10\xd1\xd90\x92\x17\x1e\xa0h"7/B\x93\x00\x00\x00\x00IEND\xaeB`\x82\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x18\x00\x00\x00\x17\x08\x06\x00\x00\x00\x11!\x8f-\x00\x00\x04\xf0IDATx\x9c\x85\x96YL\x95g\x10\x86\x9f\xef\xfb\xcf\xc6*\x82\xe0\x82"*\xa0\xa0"Q\xa1\x82\x15\x17P\xeb\x12\xab\xad\xb1\xad\xb6\xa6\xf6\xa6\xa6\xd5\xbb6i\xd2\xa6\xb6Io\xaa\xbdi\x1a[kbm\x1b\x9b\xa6jpk\xa2B\x8c\x8a\x0b.\xb8"\xb2\xc9\xd6\nR\x15\x15D\xce9\xe0\xffM/\x8e,*\xe2\\\xce\x9f\x99\xf7\x9by\xe7\x9d\xf9\x95\x88\x08\xfd\x98\x88`\x8c\xc1\xb2\xacg|\x82\xd6\n\xa5T\x7f\xe1\xe8\x17}0F\xb0m\x83R\xaa;\xf9\x99\x8b\xd7\xb8TZ\xf9\xc4\xa7QJa\xdb\x86\xfe\xde\xa8\xfa\xaa@\x80\xaew\xb5\xb4\xb6q\xf8X\x11\xbf\xfe\x9e\x07\x89CQ\x8f\xfc\x04\xb7xY\xb3\xfaM\xe6L\x9f\x8a\xc7\xe3\xee#\xaa\x1f\x00\x01\x94@UY\r\xbb\n\x8e\xb2?\xbf\x90\x8a\xaa:\xb4R\xbc\xbf\xe5s\x06>\xec`\xe3\xfaop\x87\x04\x91\x9a<\x86\xa5\xaf\xe5\xb00\'\x971\xa3\x07!"\xcf\xb5\xcc\xf1Tr\x11\x14\x8ao\x0b\x0e\xb2eG\x1emE\x958D\x11lY\xc4gM\xc4\x11=\x80\xc4\x91\x11LNO\xa5\xf4j5\xc5\x17\xeb)\xb9\xbe\x95\xc2\xd2m\xac]\xf9!9\x19\xcb\x111(\xa5\x9f\x07\xe8"\xad\xa1\xbe\x91\xed;\xf6rse\x1a\x91\xb9Ix.4`\xce\xd5\x10\x9e>\x16\xbf\xb1q\x86x\x18\x93\x95JSS\x05\x99s\r\xa9\x99\xb7P\xae\xfb\xfc\xb0\xf5o2R\x16\x13\x16\xea~\xaa\x12G\xef\xd7\x83b\xcf\x91\x134\x9f\xbcN\xe4\xcc\xd1\xdc\x1e3\x00\xc7\xd0\x04&,Hc]J6W\x1f\xde\xe7\xc1#\x1f\xab\x96\xcf"s\xdafT\xc8M\x9c.\x9b+\xc7\xc6q\xa4\xa0\x81\xc23\xe7X\x94\x9b\xfdd\xeaz\x01\x08\xa0-\x8d\xbf\xa3\x93\xbd\x07\x8f\xa1E\x11z\xa9\x91\xdbq\xa1<\xbew\x9f7\xd2\xa7\xb1(n4s\xec\xc7h\x04\xb7\xe5D\xd9\xd9\x9c\xad\xff\x99\xc8\xb0\x81\x94\x9c\x8d\xc6\x16\x1f\xbb\xf6\xe7\xb3(7\x1b\xad{x\xd0\x00\xc66(\xe0\xd4\xb9\xcb\\)\xadD{,|\xe7\xabH\xe9p\xf3\xe5\x94\xf9\xac\x1f>\x11[\x84 \xcb\x81\xdbrbDH\x1f\xb6\x81\x99\x89\x9f\xe0m\x1cGu1D\x8688~\xfa2\x15\xd5\xf5(\xa50\xc6\xf4\x00t\xf5\xeb\x8f\x9d\xfb\xb0;|$OL%g\xde;l\x08\xcf\xe5\xeb\x84\x0c"\x9cn\xac^\xd3\xa1\x95"\xd4=\x94\xcc\xd8MT\xc4|\xc1\x7fK\x92\tJ\x18Bs\xd3]v\xef>\xd8=\x8d\x00\x0e#\x01r\xebo6\xd1\xf0\xc8\xc3\xaau_\x11;"\x1ee9\xb9\\\xe7e\xfe\xd4N\xc2\x83\x9c\x81\x99\xee\x1e\xe5@\xf8\xbf\xdeV\x0ez\xef\xe2\x98\x9bL\xdb\xec\xf1\xc4\xd4\xa6r\xa8\xf2\x1f\xd66? **\x02\x11\xe9!Y)\xe8\xb4\x85\x1b\x8dmT\xdc\xbfC\xab\x1f\x92\x87\x05\xe1\xb4t\xdf\x1a\x12E\x87-dD\xc40<<\x82N\xaf\x9f[\xcd5\xb4Xm\x18z\xa4\xe5\xd0Ja\x8c\x10\x17;\x84\xf8p\x1fyy\xdf\x11\x9f4\to\xd88f\xcf]L\xb0\xcbB\xa4+\xbf<\xa9D\x81\x82\x84\xd0\x08\x12M\x10\xe7\xf2\ni=SI\xd9\x99R>\xfdx5\xd1Q\x03\xb1\x8d\xc1\xd2:\xc0A\x97\x98W\xadX\x8a\xc3\xe5\xe1v]\x194\x1e\xa1\xccS\xcf\xfe\xc6z|v\'Fl@!\xa20bs\xa7\xc5\xc7\xa6}\xb5\\\xfc\xf3\x0e\xa5\xdb\x0eQ{\xad\x86\xc8!Q\xacxk\xd1S\xed\xd4\x00Zk\x04\x98\x9e1\x89\xb4\tI\xb4\xb7w0<}\x12\xf7B\x9cl\xaf(\xe1\xe8\xdd&\xb4\xb2\xf0?~\x88\x11\x1b\xad,~<T\xcf\xf7{\xcb\xb9G4\xd1\xa3\xc6\xe2\xef\xf4\x91\x9d9\x99\xa4\xd1q\x88\x08Z\xeb\x1e\x1d(\x05\xb6m\xe3v\xb9X\xb6`6\xc5\xe7K\x88\xcd\x9a\x80\xc3\xe5$&"\x82\xd3u\xb5\xc4\xda\x054\xb5\x1f\xa5\xd343\xc8z\x9b\xa2\xabq\x0c\x8b\x0eG\x1cn<\x83\'`U^f\xc5\x92y\xdd[\xe1)\xa1\x05@\x02\x88\x0bge\xf1\xd7\x89"\x82G\x0e\xc6[\xd5@\xc3\xa9+\xe4\x9f,a\xc0\xba0^\x9d5\x88\xd2\xdb{\xd8u\xa0\x9a\xf2CS\x88IL\xc45t2\xed!q\xa4M\xc9`f\xd6\xe4@[z\t\xad\x1b@k\x85\x88\x10?2\x96\xb5\x1f\xac`\xf3\x96\x9d\\?~\x01-\x02\xdaEqa\x0c3fY\x18\x7f\x14\x95\xc5\t\xf8\xbc\xf7\xa8\xbdX\x00\xfa\x18\xa3R2X\xff\xd1{\x84\x86\x04cD\xd0\xbd4\xd3\xf7\xba6BYy5{\xf2\x8fs\xa0\xa0\x90\xf2\xaaZ\x9c\x96\x87\x9f~K\xa0\xb4\xba\x98\x8d\x9f\x85\x12\x14"L\x1c\x97\xc4\xb2\x85\xb3y}\xfet\xe2F\x8c\xe8s]\xf7ypz[Kk\x1b\x87\x8f\x9e\xe2\x97\x1d\xf9\x0c\x1b{\x83\x07\x0f\xfc\xe8\xb6\xa9\xacyw\x1e93^\xc1\xe3\x0e\x1c\x1c\x91\x00\x97\xcf\xda\x0b\x01\x8c\x11D\x04\xcb\xea\xd9\xedE\x17.\x10\xe4\t&m|r\xb7\xcf\xb6M\xbf\xb7\xf9\xa5\x15t\x1d\xf8\xde@"\xd2\xdd\xeb\x97\x1d\xfd\x97\x02\xf4$\x05\x91\'\x1bR\xbf\xf0_\xe19\xfb\x1f!\xe6.<6\xb6\xe1#\x00\x00\x00\x00IEND\xaeB`\x82\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00\x1e\x08\x06\x00\x00\x00M\n\x1c)\x00\x00\x07}IDATx\x9c\xad\x97ilT\xd7\x15\xc7\x7f\xf7\xce\xe2Y<^\xc6\x8c\xed\xf1\x82\x01\x1b\x03\xc6\xb5\x1dl\x03\xc5\xd4x\xa1l\x05L\x92&\xad\xba\xe4C[uI7\xb5R+\xb5\xa1j\x94J\xad\xda\xaa$\xea\x97\xaa\xe9\xa2\xa4EU\x1a\x04\xb4\x10\x08\x84\x9d`\x0c6\x01\xbc\x006&\xb1\xc1\x0b\x8c\xd7\xb1=\xf6\xec\xef\xf6\xc3x\x05l \xcd\x95\x9e\xf4\xde}\xef\xdd\xf3\xbf\xff\xf3?\xe7\xdc#\x94R\x8a\'\x1cJ)4M\xa1\xd3I\x00\xc2a\r)\x05B\x88\']\n\xf1$\x004M\xa1P\xe8\xa4\x1c\x9fP \xa7\x8c\x865\r)\x9e\x0c\x88\xfeQ\x1f(\xa5\xd0\x94B\n\x81\x94\x02\x10xF\xc7x\xef\xc4y\xce\xdchF/$[V\xae\xe03%E\x18\r\xfaq\xa0ZdwR\xf2((s20axb\xb4\xb6\xdd\xe1\xe0\x913\x1c8z\x86\x86\x86\x16\xb6\xfd\xe2\x1b\xa8{\x83\x1c\xfa\xcb^JJ\n\xa9\xdaT\xc6\xe6\xca\x12R\x92\x1d\xd36\xa0!\x84\xfcx\x00\x00\xfc\xfe\x00\xe7\xea\xea\xd9\xfb\xceqN\x9e\xad\xc5\xd57\x80NA\xea\x92\x05T\xfd\xfaE\xd2\x03\x92]?\xfc\r\xae\xde~\x84\x10d\xa49\xd9\xbc~\rOo)\xe7\xa9\xdc\\t:P(\xc4,\\\xcc\t\xe0\x1fg\xdfg\xcf\xdf\xf6\xf1A\xf5\x15\xc6\xc2!,1\x16\x8cQF\xc2\xa3>\xf2\xbf\xbc\x89eU\xa5\x14\xc5\xce\xe3?\xaf\xed\xe6\xe4\xa1SD\xc7X\x19\x1b\xf522\x12$\xda\x12\xcb\x96\xcd9|\xfbk\x1bY\x99[\x81R\xea\xa1\xdax\x80\x1bM\xd3P\nn4\xde\xe4\xe5\xe3\x878Q\x96\x88eG!I\xd9\xe9\x98\x94$\xe8\x1e\xc5f\x8f\xc3Q\xb8\x04\x19\xd2\xb0\x18\r\xac\xaa\\\x8d\xc9`b\xd8\x1d\xc6\xa0\xb7RP\x18C\xd5\x0b\x03,,}\x937\xf6\xbfNo\xef(B\x08\x1e\xb6\xd7\x87\x8aP\x08\xd8{\xf8$\xbes7\xd1\xaf\xdbD[F\x1c\xd6\x92\x0c\xe2\xda\xdc\xe8\xdf\xbf\x89#s!a\xbb\x8d`0\xc8\x88\xd7\x8b93\x95\xcc\xe2\x0c\xa2\xd4u\x8a\xca=\xa4d\xba\xb0\xc6\r1\xe4r\xf2\xf7\x03\x83\x94\xe5\xd5\xf0|\xd5\xfa\xf1\xd0\x15\xb3\x03PJ!\xa5d\xc0=\xcc\xc1\xd3\xe7\x91\xddC\xc4\\s1\xb24\x9e\x11\xa3b$\x7f\x1e\xd1\xcb\x1d\xecZZI\x00I\xe3`\x1f=\xdeQ\x16\xda\x92\xf9\xe5\xce\xd5\xb4\xf4\xefFo\xd0\xe1\x1dS\x04\x03:\x1a\xaa\x9d\xf4\xbaB\xec;\xfc\x1e\x9f\xdfV1\x1eEs0\xa0)\x85N\x08\x8e\x9e:\xcf\xad\xf6\x0e\xa2\xa5\x1e\xe3\xd5.\x8c9\x0e4\x14\xa1!\x0f\x85)\x99<\x9b\x91\r\xc0\xfa\xe4Tt\x02\xecF3!m;\xed\x83\xbf\xc5\xedi#\xca`%\xe83\xd3Tg\xc3\x1a\x1d\xe6\xc2\xa5F\xae4\xb5P\x98\xb7\x0cM\xd3\x90r\xca\xf3\x93wJ\x81\x14\x92P(\xcc\xde\x83\xc7#\x9a5\x19\xd1\x9a\xba1u\xb9\t\x89\x10I\xd6X~\xbc\xf0)\x94R\x84\x94\xc2\x11e\xc6n4\xa3)\r\xbd\xb4S\xe0\xfc.F\x9d\r\xa1\x1f\xa4\xad!\x81\xdb\x1fI\xccV\xc9\xd0\xf0({\x0e\x1c\x9b\xf2\xef\xc3D\x18\x89W\xb8\xdcp\x83\xda+\xd7\x892\x1a\xf1\xfb\xbd\x84<\xa3\xe4t(~\x97WA]\xe9\x97\xd8\x9e\xb4\x08\x84@/\x04\nPD\x80\x83"\xdf\xf9=\xbe\x98WM\x81s\'7\x9b\xb3\x10\xbe \xf8\x82\x18\xa3\x8c\x1c=]\xc3\xbd\x9e~\xe4}b\x9cr\xc18\xb2\xb7\xf6\xbfK\x7f\x7f\x1f\xa9)N\xe6g\x16\x90_\xb4\x06eI\xe3;1\x9f"\xda,g$\xa7\x99{\x11\x84\x95F\xbc%\x1b]\xe8\'\x9c-y\x03Kb/\x86Kw0\xb4\xf7\xd1\xd1z\x87CG\xce\xf0\xf5\x17\x9e\x99\x11\x92B)\xa5&\x16\xed\xe8r\xf1\x95\x1f\xfc\x8a\xc4\xd4\x05\xe4\xe4\xad\xc4\x91\x92\x0e\xd2\xc0\xdd\xfe\x11\xb2S\xac|\xb5<\x1d4\x1e*\xa6\t\r\x81\xe2[\x8d\'\xf8\xeb\xed\xab`\xb6\xa2\xf7\x85\x89\xed\x1cFW\xdbN\xa11\x9e=\x7fx\x19\xab\xd52\tB?)\x00!\xe8\x1d\x1c\xc2\xe0\xc8\xc1\x91\xbb\x8e\x0f\xbd\x82\xe6k\x03HB\x8c\xf95\xa2\xa3tH\x04\xda,\xc9=\xe2\n\x81/\xac\xe1\xf2\xfbx\xce\x99\x13\xd1U\x92\x01\x96\x1a\xa0\xb0\x80\x96\x835t\xdd\xed!;k\x01j\x9cA}\x84\xfd\xc8\xaa\x99\xf3\x9dh\xae+\x1cy\xb3\x9a\xc4\xacbD\xfcb\x82\x868\x02\xc10?]\x9e\x80\xa6\x14J=(\xa4\tw\x84\x94\xc2($\xab\xe2\x93i\rzH6\x98\xf1u\xf4\xd1]SO\xe3\xd1\x8b\xac\xcd\xcf%k\xd1\xfcH\xb8\x8f\xaf1\t@\xd34bcll\xddP\xca+\xbf\xff\x13x{1\xdb\xe21\xd8\x17\x93W\\\xc2\xca\xc5\xf6\xc8Os\x947\xfd\xf8\xfbm\x8eE|\x7f\xff\xbf\xe9\xa8k\xe3\xf6\xe5\x9b\x8c\x0e\x8e\x10\x08\x87\xd9\xb1\xb3\x12)%aMC7\x0e`Z*\x8eL\xec\xd8R\x81\xd3\x99\x8c/$\x18r\xbbq]?\x83f\xfb\x88?w6S\xd7\xe7"\xa4\xb4q\xca\x15J\x85#\x17\n\x05\x8cxC\xec9\xd7\xc5\x1fww3\xba\xbf\x9d\xa6#\xe7\tx\x03h:\xc9\x8a\x82e\x94\xaf-\x8e\x18\x9d\xc6\xe0$\x00)#\xe1\xb1(#\x95\x8a\xb5\xc5\xf8|>\x04`OK\xc3\x9a\x9bE\x9d\xeb.\xaf\xb5\xd4s\xf2n\'\xa8Hu\x13B\x87\x10:P\x02\x81\xc6\xab\xff\xbd\xc5\xcf\xfe\xd9D\xed-7\xc6\xd4<\xac\xf1\xb1\x08\x9d$\x10\x08\xb2m\xc3:,f\x13\x9a\xa6\xcd(J3\x8a\xd1D|~a\xc7F\xccf\x13!\x7f\x90\xf4\xe2e\x18\x13lD\x85A/$\xd5\xee\x1e\xc2B\xe0\x0f\r\xd0\xdc\xfb/\xda\x07\x8f!\x84FG\xbf\xe0XC?\xb1\x16\x03f]\x18aK\xc36/\x1d\xdf\xd8(\xa9\xceD\xaa6\x97\xcd`z\xd2m3\x84$$J\xc1\xea\xa2<\n\x96gs\xb9\xfe\x06\xce\x95\xcb\x08\x86\xc2\x08\x93\x01\x9bN\xd0\xd1\xd6\xcb[\xc3\xbbHr\\\xc0\xe3\xf7qo\xa4\x86t{>\x8d\x17\x9f\xc3\xe7N%*6\x9e@PCSz\xa2S\x96\x13hm`}\xe9*2\xd2\x9c\x91\x1c"\xe7\x04\x109\xd7\x19\rz\xaa>[JW\xd8OBn&c\x83\xc3\x8c\xb4v\xd2u\xa1\x91\x0f/\xb4\xd0\x93\'y\xe9\x95%\x18d\x90>o--\x9d\x97x{7\x0c\r\xc4\x11\x9f\x9e\x85))\x17\x15\xb3\x00Cb.\x8e\xe4t\x9e\xfd\\\xf9\x14\xc3b\x0e\x00\xd3\x05\xb2}s\x19\xf5\xcaK\xfd\xdb\xc7\xb8W\xd3\x84\xa7\xbb\x9f\x80\xdf\x8f\xd2I\xae7\x98\xe9\xb8eb\xfe\xe20z\xbdF\xc7\xb5,\\\x9d\xd1\x08\xfd\x10=\xad\x970\xdcn@g\x9d\x87.a)\x1b6ma\xd5\x8a\xe5(\x98:\xccN\xb7w\xff\xc4\x84@\x92\x93\x1d\xfc\xa8\xb2\x9252\x1a\x93/\xc4\xb0\xd7\x8b_i\x18\x8cz<\x1e?\xa7O\xb9\x08\xe2&\x140\xd2P\x93\x80"\x84\x10\x12\x8f?\x84\xc7\xeb\'\xddn\xe0\xc5M\xe9\xfc\xfc\x9b[1F\x99\x1e0<io\xb6#\xd9\xf4|=\xe0\x1e\xe6\xe8\xa9\xf3\xec;t\x92\xda\xcbM\xf4\x0f\x0e\xb1 \xdd\xc9\xab\xaf/\xe4js5\xbb^\xb2\xe1\xf5\x8f\x918\xcf\xce\xbaO\x17\xf2\xcc\xd6J\xcaJ\x8a0\x9b\xa2f5\xfcH\x00\x13 &\x0e)\x13\xcf\x17?hb\xdf\xe1\xe3\xbc\xf3\xee%\xcaw\xf4p\xb7\xdbG{\xc3b\x9e\x7fz\r\xdb7V\x90\xb3d\xd1\xe4\xff\x8f\xd3\'<Vc2\xd1\x1bL\xf7\xe1\x9dN\x17g\xebNc1\xc5\xb2n\xd5\x1a\x12\xec13\xbe}\xdc\x06\xe5\x89:#\x05\xa8\xf1\xa6C\xde\'\xa8H3"f\xad\x94\x9f\x08\x80\x19\x06\x95\x8aTQ"\xc2\xfd8}\xe1\xff\x05\xe0\x93\x1a\xff\x03\x198^t\xfc\x9c_\xc7\x00\x00\x00\x00IEND\xaeB`\x82\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x000\x00\x00\x00-\x08\x06\x00\x00\x00\xe8J\xe8\xc2\x00\x00\rkIDATx\x9c\xbd\x9aYl\x9c\xd7u\xc7\x7f\xf7\xdbf\xe5\xbe\x93\xe2\xbe\x894\xb5K\xa4\x16S\xabe\xc9\x92\xd7\xb8N\x9a:i\x0b\xa7\xad\xd3\xfa\xa1\x06\x8a>\x04u\x1f\xf2\xd0\x87\xc6E\xd3\x025R\xa0\x88\xd1\x16h\xe2\x14p\x92V\xd1bY\xb4,\x99\xdaM\x89\xe2&\x8a"E\x91\xb4\xb8\x88"\xa9\xe1\x0c\x873\xf3-\xb7\x0f\xc3\xa1%\x8b\x92H\xd9\xea\x01f\x1e\x06\xf7\x9e{\xfeg\xbf\xe7\x8e\x90RJ\x9e\x10I@<)\xe6s\xa4<\t\xa6RJ\x1cG\xce\x0b\xef8\x0eOJO\xdf\x18\x00IBp\x07!\x04\x8a"\xb0,\x0b\xa4DQ\x14\x84\x10O\x04\x88\xf8\xba.$\xa5D\xce\t\x99\xa0\x89\xc9;\x9c\xbep\x99\xe6\xcb\x9d\xf8]nvoY\xcf\xea\x15\xcbq\xbb\x8c{\xf6\x08E\xf9\xda.\xf6\xd8\x00\xa4\x94H@\x11_\x8ap\xado\x90CM\xcd\x1c9~\x9a\xab=\xfd\xac\x7f\xf3\x15\xc6{\x87\x18\xfc\xf8\x02\x9b7\xafe\xdf\xae\xa7\xd9\xb5\xb5\x9e\xec\xcc\xf4\xf9=\x8e\x8c\xbb\x9a\x10\x8f\x07eI\x00$ \xe7\\$q`h&\xcc\xd9\x966\x0e\x1d;\xc5\x89\xd3-\x0c\x8f\x8d\x13\rG(_S\xc3\xbe\xbfy\x83\xa2\x90\xc5?\xfd\xe8\xa7\x0c\x8d\x8d\x93\xec\xf7RQZ\xc4\xb3\xdb7\xf1\xec\xf6M\xac\xae\xab\x9a\xb7\x9c\xe3H\x84X:\x10m)\x8b\x05 \xe6\x0e\x1c\xf8b\x84\xa6\x93\xe79\xdc\xd4\xcc\xc5\xb6n\x02\xd3AtCG\xd74\xdcI~\xf2\xd7-G\xf7\xbaQ\xfd\x06e\xab\xaa\x98:\x19\x04\x04]W\xaf\xd3\xd6\xd5\xc3/><\xc4\xe6\r\xabya\xcfV6\xad_IzZ\xca\x92\x04\x9f\x97i)\x16\x88\x85#\\h\xbb\xc2\x91\x13g9v\xf2,\x03\x83#X\x96\x85a\xe8\xa8\xaa\n\x80eZd\xe5g\xb1\xee\xed\xef\x90\x91\x97\xc5\x96\xdc\x02\xba\x9b/\xf1\xde\xdf\xfd\xeb|Z\x15B`\x9a&\x96e\xe3\xf1\xb8YQS\xce\x9e\x1d\x9b\xd8\xb9e3U\xe5\xc5\xe8FB]\xdf\x00\x00)%B\x08.\x0e\r\xf2\x93_}H\xdf\xa7\xad\xdc\xe8\xba\x8ej\xe8hn\x03UU\x90\x8e\x9c_gEc\xac}i;\x05\xafn%C3(\xf4\'C8\xca\xef~\xf2\x1f\\hi\xc7\xe3q\xe38\x0e\x8a"\x10\x02L\xd3!\x1c6\xd1T\x9dM\x9b\xf3\xd8\xb5\xab\x987\xbe\xf56I\xde\xb4y\x9e\x0f\xa3G\xa6Q!\x04H8t\xe0\x13\x8e\xf9f\x18\xf8\xfd\x95d\xbd\xdeHZ\xd52\x0cE\xc5\x99\x8da\xdb6(\x02\xcbvHIK!cM%\xb6"\x10@\xb97\x89\xb5%E\x94mx\nMS\x91\xd2A\x08\x88\xc5l\xa2\x11\x05\x8fGgc\xa3\x9f\xef\xbd\x15f\xf7\x1f6\xd33z\x8c\xe3\';\xe3\xca[\x84\x05\x1e\x1a\x03\t\r\x0c\x8e\x8cq\xe8\xd7\x1f\x93\xba\xa1\x80\xfeg\xb3\x08d{H^\x97Or\xff\x14\x9e\xb6aD\xdf-f\'\x83\x08\xd3"{C1\xbe\xe2\\"1\x0b\xc3\xe7f(\x1c\xa2;<M\xc3\xd3k\xb9p\xa8\x99\xbe\x81QtM\xa7\xb0\xc8Eim\x88\x15\x1b\xa6\xc9,\x1c\xc3\xf0\x05pb\xc9t\\\xf02s\xe38\xfb\x9e\xd98\xef\x96_\x03\x00\x08\x01G\x8f\x9f\xa6\xff\xe6()nA\xd6\xc6b\xc6T\x8b\xdb\x86\xc2\xed\xda4\x92j3I\x1e\r\xe3\xef\x1e\xc7\xbc4@vC-\x11U\x80)\x99\xb5l\xb2\xdc\x1e\x96\xa9*\xbd\x12\xf2\xea\xcb\xd0}7\xd9\xb0\xdd\xa4\xb0z\x94\xe4\xec\tl\'\x8ce\xa9\x98\xa6d\xfcz>\x83}\x06\x13#\x97i\xbf\xd2\xcb\x9a\x15\xcb\xe7\xdc\xed\xc1\x8e\xf2@\x00\xf1\xe2$\x98\x0e\xcep\xb8\xe9\x14\xa6t\xb0G\xee\xe0\xee\x19G\xac\xce\x82\x88\x85t \x88M0\xcf\x8d\x9a]\xc0\xc6]+\xf9~U\x03\xbd\xe1\x10]\x81I$\xd0\x13\xbc\xc3\xe8\xec\x0ce\xc9\xd9\xfc\xc5\x1bO38\xfaK\xa4{\x14\xdb\x96D\xa3\x02\xd0\x01\x89*\\\\>\x9bB,\n3\xe1\t\x0e\x1dkf\xcd\x8a\xe5\x8f\x8c\x81\x87\x00\x88k\xff\xdc\xc5v>\xbf\xd4\x85\xc7\xeba6\x1c!\xa9k\x0c\x7f]\x0e\xc1\xbbr\xb60ml\xdbb\x7fu5/\x16\x95\x13\xb6,\xfag\xa69w{\x0c\x9f\xa6\xf1ZQ9\xc5\xbed\xa0\x94\x83\xe6\n\xfan\xdf@W\xfd\x08a\x83\x04\xa1Z\x84&\n\xb8\xd6\xe1Bb\xa2\xaa*\x87?9\xc5\x0f^\x7f\x99\xdc\xec\xcc\x87\x06\xf3\x03m\xa3(\x02)%\xff{\xe4\x04\xe1H$\xbe\xd0P\xb1zFI\xbd\x15\x06]\x05\t\x8aP\x90\xd2a\x99/\x8d\x97\xb3J\x91R\xe2\xd54\x9eJI\xe7\x8d\xf2\x1a\xbeS\\I\xb1/\x19\x89\x83\x94:\x95\xe9\xdfFW=\x08\x1c\x04\n\x8e\x94\x18\x86A_{\x06\xe3\xa3\x12M\x03]\xd5\xe9\x1f\xbc\xc9\xc7\'\xce\xcd{\xc3\x03\xe5\\\xe8G\xc7\x89o\xe8\xea\xb9\xce\xa9\xf3\xads\xd9C"\x14A\xf4\xce\x0c\xde\xb6\x11t\xa1"\x91\xd8\xb6\x85tl^\xc8)\xa1&)\x1d\x84\x88W\xec{>q~B@a\xca\x0e\xb2|\xab\x88\xda\xd3\xd82\x86\xa2:DB\xc9t~\x9e\x8am[ @(\x82X\xcc\xe4pS3\xa1\xf0,\x8a\xa2<\x10\xc4\x82\x00\x12\xd6:\xd2t\x8a/\x86\xc70t\r\xa4D\x08\x05[H\xcc\xb6A|\xd3QtMeSz>\xff\xbc\xf2\x19\xde\xa9\xa8\x9fO{\xe2\xbe\x8f@\xcc\x1d\xe5\xd13\xd9Y\xf63\x1a\n\xdf!\xcd\xbd\x1cMs\x18\xed\xcd\xa0\xf7\x8a\x85f\x80\x94\x02G:\xb8\x0c\x83s\x17;hi\xed\x9a\xb3\xc2\xc2\x16\xb8/\x06\x12\xfe61\x15\xe0\xa3\xe3g\xe2\x1d\xa3P\xb0\xb1\xb1\xcd\x18\x9a*pG\x05;\xa7Sy\xad\xb1\x91\xfd\xe9\x85$\xc5K\xe7"I\x90\xee\xade\xa3\xf7\xc7\xd4\xe5\xbc\xc9\x95\xc9\x0fi>r\x19M\xbd\x8d\x13\x0bc\x02BSP5\x95`p\x86\x83\x1f\x7f\xc6\xb6\xcd\xebP\x94\x85c\xe0~\x00sZ;y\xe6"\xdd\xbd70t\x95\xd9\xd9\x08~\x8fNJN!k\xd6\xac%\xa7\xb4\x8e\x89`\x12\xaf\xa4\x94\xe1\xd2\x05\xb6\x94("\xae\xe9\xc5P<\x1e\xc0o\xe4\x13s\xfd\x01\xc7\xea\x0cD\xea\x04i\xedc\xc4\xba\x87\x89\x8e\x07\xb0\x85\x83\xa2*\x9c8{\x91\xde\xfe!*J\x0bq\x1cy\x1f\x90{\\H\xcax{\x1c\x8d\xc5\xf8\xed\xc1&fB!t\xc3M\xfd\x86\xb5\xac\xda\xf6*o\xfd\xe5_\xa1\x17og\xd3\xba:\x06\x03&\x9f\\\xb95\xc7D,Zx\x00\x812\x97U$\xbf\x1angX\x99a\xb8"\x95\x9e\x17\xab\x08\xfeq\x03\xca\xfeU$\x97\xe6\x92\xe4v3\xd87\xc4\x91\xa6S\xf1}\x0b\x1cqO/\x94(\x1a\x17.u\xf0\xe7?\xfa)ee%\x14V\xad\xa1\xb8\xb4\x12Kq\xe15\x04\x93\xd3\x11|n\x95\xc0\x8c\xc5\xf8t\x8c\x7f\xfcA\x1d\xba\xba\xb4\x8b\x9dD"\x10\xf4\xce\xdca\xd7\xb9\xdf0\x18\x9c\x04E\x03\x1c\xd0T\x10\x02o\xd0"\xado\n\xa7\xe5\x06\xf5)9\xbc\xff\xee;\xa4\xa7\xa5\xdc\x97R\x17<y:l\xe1-n m\xc5+xrk9\xde\x15`|2DS\xeb(\xc1Y\x8b3\xddS\x04\xc2&\xc3\x93\x11\xc6\x03\xb1\xb8PK\xb8\x16%\xd6~\x1e\xb8\x85"\x04oU\xacceJ\x16?,Y\xcdJO\x06\x7f\x96WK~n&\xdf\xfe\xee~\xdc\x7f\xba\x8d\x1b\x85\x1e.u\xf6,\xc8k\xc1B\xe6\xf7\xea\xd8c\x97\xb8|\xe2&Iy\xb5\xcc\xea\xd9\xdc\x9c\x8ca\xd96\xfdcaTE\xd09\x14\xe4\x85\xf5\xb9d\xa7\xb8\x80\x85\xcd\xfb J\xacmH\xcdE\x13\x82\xe5\xbe4\xc6"a*|)Lc\xf1TZ6\xb1p\x04\xfdL?E\x9ft\x92\xaa\x1a\xd4-/\x7f4\x80\xc4eeUm\x05\xc59)\x1c=\xfe\t99\x1d$g\x15\x93\x94W\x8b\xe5-$\xaa\xf81-\x1b\xafK\xb0ku&\x9a*\xe6\xab\xf6\xa2\x01\x10\xaf\x15\xa5\xded\x1a\xd3\n\xf8\xf5\xd8u\x9e\xcf/\xe7\xd3\xf1A\xd6G<\x1c8x\x10\xabu\x90\xa3=\xfdD\xee\x84\xf8\xdb\xbf~\x93\x9c\xcct\x1c)\xef\xb9\xc2\xde\x0f\x80x\x1au\xbb\\\xbc\xb4o\'\x9f\x9d\xbf\xcc\x9d@\x90@\xa0\r\xd7`7)Y\xf9x\xb3\xabPS*\xa8,-dse\x06\x90(T\x8b\x0fc)\xc1\x96\x0e\x9a\xa2\xf0G\xc5\xcby\xe3\xdcG\xdc\x1a\x87\xf1\xa63\xfc\xb6\xeb&\xb7\x86\xc7q\xe6\xee\xdce\x95\xc5\xec\xdd\xfd\xf4\x97\x1b\x1f\x06\xe0n\xda\xb1e=\xd5\xe5Ett\xf7a\x18\x06Q\xd3at\xe8\x06\xfa\xc8\x00\xbe\xe4\x8bd\xad{\x8d>\xab\x92*;\tc\x11m\xef=\x8a\x12\xa0\t\x85\xdb\xd31F\xae\xd8\x94\x1c\xba\xc9\x7f\x9f\xfd\rv(FLH4]CW\x04\xb3\xb3Q\x1a\x1b\xd6P]^\x0c\xb0`Wz\x1f\x00!\xe2=Pvf:\xbb\xb7m\xa4\xb5\xa3\x07\x97\x11?T7\x0cbQ\x93T\xafJp\x99\x87\xf7\xae\xb6Q\xeeMbCf6\xeb\xd2\xb3\xf1k\xfa\xa2\x00\x0c\x8e\xcfr\xa8e\x94\x13\x1d\xe3\xf4\x8e\xc6\xf0\xcdd`GMlC%\xceA\xe2\xd8\x92$\x9f\x97\x97\x9e\xdb>?SZ\x08\xc0\x82Y(\x91Y\xf7\xee\xdcBAn\x161\xd3\x8c3\x91\x12\x05I\xe1\xda\x1aDZ\x12\xa6e\xd1\x11\x98\xe0\xdf\xfb\xba9xs`\xee\xe8\xf8\xb7\xc4\x99+X\x0e\x129\x9fy\x02a\x93\x1f\x7fp\x85\x7f\xf9\xddu\xae\x0c\x85\x908\x98)\xa5\xa4f\xe6 -+\xee\x8cB!\x12\x89\xb2nU\r\xebV\xd6\xcc+v!Z\x10@\x02\xe9\x8a\x9a\n\xb6\xd4\xaf\xc6\xb2\xec\xb8e\x1c\x07\x8f\xdfK\xce\xda*\xa4\x88\xc7\x8c[\xd5@\xc0\xa5\xa9q\xc6"a\x90\x0e\xcc\xf5>\xf1\x82\xa5\xdc\x15\x1d\x92\xf3=\x93\xb4\xdd\x98\xc6\xe3Rq\x19*86RO&)\xb7\x1aE\xc8\xf984t\x9d\xbd;\xb7\xe0\xf7y\xe7F.Kl\xa7\xe3e[\xe1\x95\xfd;\xf1z\xdcH\xc0\x8a\x99\x14\xad\xac\xc2[\x94\x83\x193A\xc4\xdb\x08\x1d\x85\xb1\xd90\x97\xa6&\x10B\xc1\x9167\xa7?\xe3D\xff\xdb\xb4\xdc|\x97;\xb3\xd7\x10\x02lGp\xf8\xe28Q\xd3F\x11_\xce\x82\xa2\x96D\xcf\xac\xc2\x9f\x9c\x8a\xe38\x98\x96Eiq\x01{wn\x9e\xd3\xfe\x83\xa4|H\x10\'6\xd5\xaf\xadcM]5\xcd\xe7[I\xf1\xf9\xc8^]\x89i\xa8\x88Y;\x9e}\x14\x81\xa2\xabh\xa8\xb4\x8f\r\x93+?e \xf0_\x04\xa3\xa3\xf8\x8c\x1c\xae\xde\xfe%m\xa3\xffFe\xf6\x1e\xa2S\xcfqm\xc0\x87n\x18H\x01\xd2\xb1\x11\x02\x14i\x131\xb2\xf0e\x161\x13\xea bZ\xec\xde\xbe\x91\xfc\xdc\xacGN&\x1e\x02 \x1e8)I~\xf6\xec\xda\xc2\xe9\xf3\x97I\xcaI\'\xe3\xa9R\xa2Q\x13\x14\xd0]\x06J\xcc&6:\xc9Dk\x1f\x1f\xb6]%\xb4\xff\x1a;\xb6\x95R\x92\xfa2\x81h/\xb7g\xda\x99\x89\r\xd1>\xf2>\xe7\x0e\\\xa5\xfft\x19\x99%\x95\xd8I\xe58\xae4b\x8e\x86c\x9b\xd8R#)\xaf\x86\xf1\x81N\xb22\xd2\xd8\xb7+\x9e:\x1f\x1b@\x02\x04\xc0\xde\x9d\x9b\xf9\xf9\x7f~H\xde\xfa\x1a\x94\x8cd\xb4\x98\x89\x16\x89\x11\xe8\xea\xe5\xd6\xa5k\xf4\xb7t\x11\r\x85\t\x86"\xd4\xe4\xd5\xe3\xda\xe6c0\xf0\x11n5\x1dE\x18h\x9aFx\xb2\x80\x8e\xf3^n\x8f\\cf\xaa\x1f\x977\x99\xf4\x82*|\x99U\xd8\xbe\x02"\xb8\x90\xc9\xa5\xf8R\xb3\xa9\xaf+fU]u<\xa0\x1fr\xa1_4\x80\x92ey\xbc\xfa\xea^:RT\xac\xb1I&Z\xaer\xe3\\\'S_\x8c\x11\n\xce\xa0\xe9\x1a\x8a\xaa\xe0\xf5{9}\xa1\x93]=\xabhlx\x9d\x91;Wp\x1c\x13U\x93\xf4]\xce\xe5\xd6\xa8\x83\xee\xd2\xb1\x1c0\xa7\x03\x04\x03g\xf1\xfb\xdb\xf1\xa4\xe6\x91VP\x83\x9d\\NjA\r\xdf\xda\xd7\x80\xa1k\x8b\x1al=r6\x9a`\xf2\xdd\xd7\xf6\xf3\xfe\xc1\xa3\x1c\xf8\x87_0\xd8;\x88\xa2(\xb8\xbdn\xdc^\xcf\xfc\xdc_U%S\x936\xad\xe7!\xaf\xfc\x00\xb3\xd10\x8a*\x99\r\xa5\xd1\xd9\xe2\'f\xc60\xdcsm\xbb\xaa"\x84N(\x1cer\xb2\x9b\xd1\x81\xabTTV\xf3\xe2\xbeg\xd9\xb1usB\x85\x8f\x12o\xf1\xb3Q\xe98LM\x06h\xed\xba\xc6\xe1OO\xf3\xd9\x99\x8b\xf4\x0f\x0e\x83\x94\xe8\xba67\x84\x92\xc4b6\x85\x85~\xfe\xfe\xdd\x1d(\xfe\x1e\xfa\xa6>\xa0\xb7\xb5\x88\x0f\xde+\xc4\xb4f\xe7Rt\xfc\xf1#fZ\xb8\x0c\x83\xda\xe5e<\xd3\xd8\xc0\x9e\x1d\x1b\xa9,-\xc4\xe3\xf5.\xba-y\xec\xf7\x81\xab\xbd7h:y\x9eCM\xcdt^\xed#\x18\n\xe32tTUA\xc1\xcd\xf7\xff$\x8bg^\x84\xebc\'\xf8\x9f\x9fWq\xa1Y\xa2\xe96\xd1\x98\x85m\xdbde\xa4S\xbf\xe6)\xf6\xefn\xa4q\xd3Zr\xb32\x1eG\x8c\xa5\x8d\xd7\x13\x8f\x1a\x02\xa8\xae(\xa1\xba\xa2\x84\xef\xbd\xb6\x9f\xcf\xce^\xe4\xe0\xb1fN\x9eia|b\x8ahd\x86\xce\x0be\xecy\xce\xcf\xe4H&\xdd\xed\x82h,\x8c-\x15\xcaK\x96\xf1\xcc\xd6\x8d<\xbf\xfbiV\xd7-G\xd7\xe3"$j\x02,\xed\x8d\xe0\xb1-\xf0\xd5\x07\t\xdbq\xe8\xec\xee\xe3pS3G?=\xcb\xb5\xebC\xfc\xde\x0f\xfb\x18\xe9O\xe3\xf4\xe1|\xea7\x94\xf1\xfc\xee\xad\xec\xd8\xb2\x81\xa2ey\x0f\xe4\xb3Tz"od\xb7nO\xf2\xf1\x89s\xf4\x0e\xb5\xa2+>\xd6\xaf\xa8\xa7q\xd3j<n\xf7]{\x98{\xe9\xf9:\xa7\x7f\x03\x00\x12$e"c}\xa9\xcdPh\x16\x97K\x9fw\x93\x85\xde\xd5\xbe.}c\x00\xee\xa6\xafZ\xc5\xf9\xca\xbb\xda7IO\x04@\x82\x12\xac\x9f\x84\xe0\tZR\x16Z*=I\xc1\x13\xf4D\xfej\xf0\xffI\xff\x07\x86\x1f _{i[\x13\x00\x00\x00\x00IEND\xaeB`\x82\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00@\x00\x00\x00<\x08\x06\x00\x00\x00\xd6\x89\xbcd\x00\x00\x14.IDATx\x9c\xed\x9bYl\x9cYv\xdf\x7f\xf7[jam\xdc\xc5}\x11\xc5E\x94(\x92"\xd9\x12\xb5K\xadnw\xcfx\xbc4\xc6\x0b\xec\x86m\xf8\xc1F\x82\x00\xb1\x1f\x02\xe4!~\xf0[\x10\xc0\xf0\x8b\x01\x071``\xe0 \x89\x93\x19Oc\xa6g\xa6wuK\xa2(\x89\x14Iq\x17%\xee\xfbZ\xac"\x8b\xb5|\xcb\xcdCU\x91R\xb7\xba\x9b\x12\xa5\x96\x81\xe4\x10|\xa8\xaf\xbe\xbb\x9c\xff9\xf7\xdc\xb3\x95\x90RJ\xfe\x1f&\xe5U.\xfe\xaf\x01\xf9W\x02@Z\xe9\xc4c\x9f_\x95"j\xdf\xd5B\xbbL\x0b\x81\x10I\xd6\r\xd3D\x11\x02UU\xbf\xf2\xcewE/\x1d\x80\xa4tAQ\x92L\xd9\xb6Mp3\xcc\xad\xee~:z\x06\xf0{2x\xfbR;5U\xe5x2\xdc\xbb\xe3l[\xa6\xc0z\xb9\xfb\x13/\xcb\x08~Y\x9a;\xd1\x18\x93\xd3\xf3\xdc\xb8\xd3\xcb/?\xbe\xc1\xdc\xea\x1a\r?\xb8\xc0\xe6\xec23]C\xb4\xb75\xf1\xf6\x95\xb347\xd4R\\\x98\xbf;.\t\xc4\xcb\xd3\x8a\x17\n@r&\tB\xec\x9e\xef\x95\xb5\r\x06G\x1eq\xad\xa3\x9bk\x1d]L\xcf-a\x9b&\x87O\xd4P\xffo\xdfa{b\x81\xde\xff\xfaS6\xc3[d\xb8\xdd\x9c8V\xcd\x1b\x17O\xd3\xdez\x82\xba\xeaJ\\NGj\xee\x97s<\x0e|\x04\xd2L\xef\xa9\xab\x00)\x19}4\xcd\xad\xae>n\xdc\xee\xa5\xbbo\x88\xb5\x8d\x10\x8a*P\x84\x82\xa6\xeb\x14\xb5\x1e\xa5,3\x93\xd6\xd3\xa58\xefM\xf0\xf3\x0f\xbf a\x18\xdc\xee\x1e\xe0n\xcf\x10U\xe5\xc5\xb4\xb7\x9d\xe0\xdc\xe9\x93\xbcv\xf28\xf99Y\x8f\xad\xf9\xe2\xc0xn\x00\xa4\x94H@\x11\x82\xb4=\xdf\x89\xc6\xe8\xb9?\xc2g\x1dw\xb9\xd3=\xc8\xf0\xc3\t"\x91(N\x87\x03]\xd7@\x80m\xda\x14T\x14\xe2\xae*\xc2\xe7pb\xfa\\\xb8jJ\xc8\xbe\xed#\x12\x8b\xa3i* y85\xcb\xf0\xd8\x04\xbf\xfc\xb4\x83\xa6\xe3\xb5\x9c;\xd5\xcc\x95sm\x1c./FQ\xf6./[J\x944\xf0\xcfA\x07>\x02\xa6e\xb1\xb4\xb2\xc6\xad\xbb\xf7\xf9\xf0\xda-\x06F\xc6Y\\^%a\x188t\x1dE\x11\xbb\x86\x10!\xc0\xb29\xf9\xdb\x97(~\xeb\x14\xaa\xae\x93\xebrS\xbcc\xf1\xb3\xbf\xfb\x9f\xdc\xe9\x1e\xc0\xe5r<f\x00\x05\xa6ia\x9a&~\xbf\x97\x8a\x92BN\xb76\xf0k\x97\xcf\xd2p\xf4\x08\x01\xbf\xf7 [\x07\x0e\xa0\x01K\x1bA\x16\xa7\x17\xb9v\xab\x9bO:\xba\x18\x9f\x9ackk\x1b)%\xba\xae\xe3r8\xb0\xa5\xc4\xb6S\xf8\n\xb0-\x8b\x82\x82<2\xeb\xca1\x1c\x1a\x15.\x0fW\x0bKYK\xc4\t\xd4\x94\x9118\x86i\xdb\xc0\x9eo\xa0\xaa\n\x9a\xe6 \x1a\x8d\xd1?\xf2\x90\xb1\xf1i\xde\xff\xf8:M\xc7\xebx\xe3\xfcyZ\x9a\x8ePR\x9c\x83\xc7\xed#\xe9Z=\x9b&<\x13\x00\xe9\xe9\x13\t\x83\xbf\xbf\xf1\x05\xef_\xeb\xc0\x98X&8\xb9\x84a\x9a\xe8.\'B\x88\xa7:6\x02\x81\xb4lr\xea*\xf0\x94\xe6cX\x16a\xd3\xe0\x97\x0bS\x18\xc0\xd9\xb3\xadL\xde\x1e\xe0\xe1\xe4,N\x87\xbe;\xfe\xf1k\xd4\xedt`\x986\xb3\xb3\x1blGzX\x0e\r\xd21\xa6\xf0G\xbf\xf1\xe7\x9c:~\x15\x99\xb4\xbf/\x0f\x80\xf4\n\xc3\xa3\xe3\xf4\x0f>`\xfeB\x19\x19m\xc58\x06\x17\xc8[\xd8&42K,\x12C\xd1\x94\xbd\x9d\x88$\xf3\x96m\x93\x95\x15 \xe7X\x05\x96\xc7\x89\x8c\x19\x98\xd2\xa6>\x90K\xad?\x0b\xa3\xc0\xe4z]%S\xb3\x0b\x8f\x8dK.)%H\x1b\x12\xa6\xa4\xa8\xc4M\xcd1\x8b\x82\x8au\x8e\xb7E\x98|\xa8\xf2\xf9\xf5\x87\x1c-o\xc7\xef\xf3 \xa5|&\xe3\xf8\\G\xe0ZG\x17\xfd\xbf\xba\x8d\xa7\xf8<\x13EN\xdc\x97\x0f\x13\xdf\xb6p4\x16\x92?\x13b\xbbo\x8ax(\x82\xb4l$\x124\x15\xdb\xb4\x08T\x14\x90y\xa4\x04\xc30\x11\x8a\xa0\xd2\xeb\xa34\xc3K\xd7\xfa\nS;[T\xb4\xd5\xd3\x7f\xb7\x9f`(\x84\xa2\xa8XfR\xf2\x9a&(?\xacS\xdf\x14\xa3\xa0r\x86\xe2\xaa\x08\xb6\xb6\x88\xaa\xf8X\x98\xa8\xe3W7:y\xfb\xd2\x15N\xd4\xd7>\xb3\x16\xec\x1b\x804\xb2s\x0b\xcb\xdc\xea\x1e \x1a\xda\xa6\xe0\xd1:\xce\xdc\x02\xa2\x98\xcc\xbb\xc0y"\x8f`u6\x8e\xe3y\x94\xac\xc4\x89t\x8d\x93X\x0cb\xee$\xf0\xb9]\x14\x1d\xab\xc2\x0ed L\x0b\x84`,\x1cb~g\x07\xbf\xaes>\xbf\x08\x87\'\x87\xa1\x8f\xeep\xa7s\x00G\x86\x86\xcbks\xb4A\xa7\xbee\x0b\x7f\xc1\x03r\x0b\x0c,\x11&\x1e\xb7Pm\xc1\xfa\xb2\x9f\xd9\xb1L\x96V\x97\xb9\xde\xd9C}\xcd\x11TU}&\x10\x9eY\x03\xee\xf4\x0c20\xfa\x08E\xc2V\xef$E\xad%L:M\x84%\x89G\xe3\xc4\x15\x10e^\xb6\x8a\xbc\xf8j\xb3(\\\x8d\x13\xba>\x82Wq\x90y\xbc\x92\x84e\xa1\xa5\xaeN\xbf\xaes\xe5P\t^]g4\xb4\xc9`h\x9d\xac\x96\xc3T\xae\x0fPs\xcc\xe0\xc4k\x11\x9cY\xb3\xb8<Q,\x19#f@2~S\xd0U7\x1b\xf3\x85<\x1a\x8b"\x84\xe4\x83k\x9d\xfc\xe6\xdbW(-:\x94\xb2\x1f\xfbC`_\x00\xa4\xa5\x1f\nos\xbd\xb3\x87\xe0f\x08\x87\xae#7"\xb8F\x97\xa11\x07)\xd8\xf5\x00e\xc2$\nD3\x14\xd6+\\d\x145s5\xab\x92\xf3\xc5ULl\x87\x99\x8fF0l\x0b\x87\xa2\xf2 \xbc\xc9@h\x1d[JJ=\x994\xbf\xd9\xc4\xe5\xe6_\x10\x11\xb7\xd04\x81-M\x12\x06\x80\x9a\x94\xaa\x04E\xb3\xd9\t;\x19\xea\xf6a\x9a\t\x84\x10\x8c\x8eMq\xe7\xde\x00%\x8f\xb9\xd1/\x0e\x00\x92x\x0e\x8d\x8ds\xfdv\x0f\xba\xa6!\x14A<\xbc\x83\xec\x9b&\xbf\xa9\x90\x15b\x80H\xc6\xf8\xa9\r\x08KbI\x0bw\x86\x97?<\xd6\xc4\xa5\xecb\xa6#[\x0c\x876\x18\ro2\xb9\x1df3\x11\xe7Df.\xc7\x02Y\xd4\x07\xb2\xf1\xeb\xd0\xe5~\x8d;\xb3\x9fa\x9aN\x04i\x0f3u+ \xd1\x14\x8d\xe0Z!\x83}\xf1$ \xaa \x1a\x8b\xf1\xfe\xc77x\xfb\xca\x19<\x9e\x8c}\x1b\xc3o\x05@J\x89"\x04\xf1\x84\xc1\x8d\xce\x1e\x16\x97Vq8t\x90`+\x02\xd7F\x14m&\xccJ\xa9\x13,\x9e\xd4\xbc\x94\x87v&\xb3\x90\x93\xbe<\x00\xca=>\xca=>N\xe5\x160\xbb\xb3E\x86\xaaS\xe1\xf1\xa1+\n`\x03\nE\xde\xcb\xf8\x9d\xff\x8b\xed\xf8\x1c\x08u\x97\xf94\xb6fBe| \x17\xdb\x94\x08\xc5D\x08\x05\xdb\x96\xf4\r\x8e\xd274\xc6\xd9\xd7\x9a\xd8\xef\x11\xd8wBdai\x95O\xbe\xb8\xf3D\xec\xaeh*[\x8b\x1b\x88\xe1E\xb2u\xf7\x13\x1bUR[p\xab:?,\xac\xc2\xa7\xeb\xc8\xd4\x1b\x12\xc8v8i\xcc\xcc\xa5\xda\x17@W\x14$\x12\x99\xdat\x9e\xa7\x91\x92\xc0E$&\xca\xeeL\xa4\xfc\x01\x90\xb1\x12\xfa\xef\xd9\xc4\xe3\x16B\x08l[\xa2i*\x1b\xc10\x1f^\xbb\x85m\xdb\xfb6\x82\xdf\n@\xda\xb1\xe9\xb8\xd3\xcb\xf8\xf4\\\xea\x1c\xee1j\xda6\xda\xd4:\x19\xcb\xdb\xa0\x8a\xa4\x89\x12"\xe9\x05Z&M\xfe\\\xced\x15\x91\xb2\x0e\xa4#\x07I:\x9eHg\x87\x92\x7f\x12\x1b\x87\xe6\xa74\xf0:\x0e5\x93\x84\x1dI}\xaf\xa4TZe| \x8f\xcd5\x15\xa1<\x06\xb8\x10\xc4\x13\tn\xdf\x1b`lbfWH\x07\x02 =A0\xb4\xc5\xaf>\xeb \x16O\xa0(\xca\x9e\x9c\xa5Du\xe8\x84\x1f-\xa2=X\xc1\xe3pa[\x16\xb6e\x92\xe3t\xf3F\xc1a\xfe}e\x13E.O\x1a\xce=`S\xe0\x8a/\xa9j\xfas\xa1\xaf\x9d\xc6\xc2\x7f\xc3!o+\x8a\xd01\xed(\x12\x0b\xd5>DO\xa7 \x1c6Q5\xb1+\x0b\t\xe8\x9a\xce\xf8\xd4\x1c\x9fwt\x7f+\xe3i\xda\x97\x11\xec\xed\x1f\xa1\x7f\xf8\xe1\x13\x92\x7f\x9c!\x0bI\xf6\\\x98\xcd\xe0\x0e\xe5\xb9Y\xbc\x9eU\xc2\x9bye\\\xcd-#\xc7\xe1\xda\x05l\x7fZ\x99|\xcb\xeb(\xe6\xb5\x92\xbf\xe2H\xce\x0f\x99\r}\xc6\xec\xe65V\xa3\xb7\x98\xec\xf7\xb1\xb1\xecB\xa8Q\x90{\xf2K\xc7\r\xe1\xf067n\xf7\xf2\xce\xf7\xaf\x90\x9f\x9b\xfd\xad\xc6\xf0\x1b\x01H\xaa?|\xf8y\'\xc1\xcd0\x9a\xa6\xed>O\x0696\x02p\xb8\x1c\xf8"\x1a\xbf\xafU\xf1\xdb\r\xcd\x9c\xcb<D\x86\xaa\'7\xb6o\xc6\x9fF\x92l\xf7Q\xb2\xddG9\x92\xfd\x0e\xc3\x1b\x1f\xd1\xdd\xd9\x8f\xa5,\xe1P\x13H\xdb\xde\xbdu\xd2G\xd5\xe9t\xd0?<Fw\xdf0\xdf\xbbz\xee\xf9\x01H\x0f\x1c~0Nw\xdf0\xa6e\xe1TUL\xd3\x02l\x9c\x0e\x1d\xd5\xe1\xe6X]\r-\xadm\x0c\xae{\xc9\xdc8\xc49w\x11\x19\xaa\x82eK\x14\xe5\xcb\n\xfe\xac\x94\xb4\x16\xb6\xb4\xf18\n\t\xaao\xf0y\xa5\xc5\xf2\xef\xe7Q>\xb5\x8d54Oh~\r\x1970,\x0b\xa1*(\xaa\xca\xeaz\x90\x1b\xb7{\xb9x\xa6\x05O\x86\xfb\x1bA\xf8\xd6#\xf0\xd9\xcd\xbbL\xcf.\xa2(\n\x96e\xe0\xf3\xb8\x91\x9a\x97\x96\xe6\x06\x1a\x9aZ\xe8\x9ew\xd0v\xba\x1ee"\xcc/\xba\x16xg!D\xeb\x91,\x14qP\xe6\xf7@\x10B%a\x9b|\xb2>\xce\xb0\x1dB\x94\xfa\x88\x16zq\xd6gQ<\x1b\xc1\xbc?\x83:\xb7\x81\xd8\x8a\x133\x0c\x84P\xb8y\xb7\x8f\xd1GS\xb4\x9c8\xfa\x8dZ\xf8T\x00\xd2\x88\xcd/\xaep\xa3\xb3\x87P8DQ\xc1!\x94\x8c\\\xae\x9cm!#\xbf\x9a\x85\x9d\x0c^?_M\xff\xcf\xc6\xe9\x9d\xd8\xa4\xb9\xc2\xc7\xb5\xfb\n\x9f\xf6\xad\xd2|8\x13M\x11\x07T\xff$\xd9H\x14\x04#\xdb\x9b|\xb02\x83"\x150,v\x04D\xb3\x9cle:qT\x07(Y\x8a"\x86\x16\tL\xadc\xad\x84y\xf4p\x8a[w\xfbh\xac\xafA\xd3\xd4\xaf\xdd\xcbSo\x81\xb4\xf5\xbf\xdb3\xc0\xec\xd2:\xf5\xcdgx\xf7\xdd?\xe4\xfb\xbf\xf3\'\xa8%g\xf8\xde\x85\x13\x98\xa8\x8c\xce\x86\xf9Ak>\xdd\x8f\x82x\xdc:\xc7\xcb\xfd\xdc\x1cYgn-\x9a\x9a\xe8\x80\xdc\x93\n\xa5\xa5\xe4\xfa\xc6<\x03[k\xd8\xd2\xc6F\x82m#\r\x03SZ\xec8l\xc6\xca\xdd\x8c\xbd]\xc5\xda;\r\xc4\xdf\xa8\xc3w\xac\x94k7\xbbY^YO3\xf5\xd4\xf9\xbf\xe6\x1aLbe*n\\\xa5\xedx\xeb\xbeO<\xb3\x81@V\x0e]ck\xf4Ml\x90\xe1\x10|\xd0\xbbB\xdc\xb0\t\xef\x98t\x0co\xe0qjDb\x16\x03S\xe1\xe4,\x07\x14\x7fZja3\xce\xcd\x8d\x05J\\>\xfe\xa2\xaa\x85#\xde,.\xe5\x95\xf1\xa7\x15\'\xf0kN\xfe]E3-\xfe|J\xdd^\xfe\xe0\xfc9\x8c7\xeb\t\xfdn3\x0b\x15>n\xf4\xf6cY\xd6\xf3\xd9\x00!M\x12\xc1\t<.\x85\x9b\xbdQ4\xa7\x87\x1d\x03\xfe\xf9\xe6"\x02I\xcc\xb0\xf8\x1f\xe18;q\x8b\x0fz\x97Q\x00o\x86Ni^\xb2\xc0\xf1<\x19\x9a\xa7\x91G\xd5\xa9\xf3f\xf1\xab\xd5i.f\x17\x93\xb0m\x1eD\x82\xbc[\\\xcb\xbd\xcde\xca\xdc>j\xfc\xd9\xfc\xe3\xcc\x10\xe7\\\xb9\xa8\xc6:\x1f\xf7?"sGR^t\x08!\x94\xaf\xdd\xcbS5 \xfdbeq.\x1ek\x8d\x91\x8e\xf7X\xed\xfd1\xf6\xe2]|\xd6*\x96\x11c\xc7\x80\x84%X\x0f\xc5I\x18\x16\xd1\x98E8jr\xac\xd4Gmq*Yy@\xe6\x05\xc9\xac\xafCQ\xb9\x9a[\x86.\x14\xfeei\x9c\xf3\xd9ELF\xc2\xdc\x0f\xaf\xf2[%\xd5\xbc\xb7<IaLP\xf0p\x93\xff\xf6\xb7?\xa2\xe3o\x7f\xcc\xf6/zh\xf6\xe5\xd2|\xb4&U\x95z\xfa\x11x\xaa\x06\xa4\xd5\xa5\xf1X\r\xcd\x8d\r\xf4\rO`\x9a3\x04W\xe6\xf0gfSX^K<\xa3\x1c\xe1\xc9\'&\xbc\xc4\r\x0b\xa4\x8d\xc7\xa5r\xb9!\x17\x97\xae\xbe\x08\xfe\x9f\xd8\xcbq_\x0eo\xe5\x95\xf3\xfe\xf2$\xef\x16\xd7\xd1\x90\x93\xcf\xb5\xd5Y~S\xc9\x83\xceG\xfc\xc3H\'\xb3\xa3\x93\x84\xb7v\xb0,\x13\xaf\xd7\xc3\xc5K\xa7p\xb9\x9c\xa9\xd4\xf93\x1e\x01)%\x9a\xa6\xf1\xfa\xb96>\xb9~\x87\x85\xa5U4\x156\xd6V\xd9X[%\xe0\xbfOVA9x\xcb\xc8\xcd\xaf$d\x078\\\xe0\xa3\xb12\x90\xcc\x00KR\xf9\xfa\x83\x93%%Y\xba\x937\xf2\xcb\xf8\xc9\xda\x04\x9f\xccOrl6\xce\xcfov\xf2O\x93!\x96\'\xe6\x98L$\x92\x85VE\xc1\xb4\x04g\xda\x1ai<V\x93\x04\xf1\x1b\xe6\xfeV?\xe0TK\x03\xc7k\x0f\xb3\xb0\xb4\x92\x0crR\xcf7\xc3[\xac\x07\xef\xe3q\x8fb\xe6\x97\xa0\x04J8~\xfa*~\x8f\x96\xf2\xf3\x0f\xcex\xda\x08\xaa\xa9\xc9j\xa5\x9f3c\x16\x1f\xfd\xf8\'\xb8g6\xd9\x9c]bMHTUES\xd5\xdd\x00\xcb\xedrr\xb1\xfd$\x05y9\xdf\xea\t~m0\x94\x1e\x14\xf0{\xb9r\xfe5|\x9e\x0c,\xdb\xde}.\x84@\xd7u\xe2\xa6\xcd\xf4\xc4\x18N{\x8ee\xcf\x06\xff}v\x8c\xae\xb5eBF\xe2\xebn\x9e}\x93\x00\x0c\xcbfb)\xc2\x8f>\x9d\xe1\x1f~\xba\x8c\xf3~\x82\xd8\xbdq&f\x16\x90\xba\xba\xeb\x9eK)Q\x80\x84aPW]A{k\xe3\xc1\x13"i\xf4.\x9dm\xe5G\xff\xfcsF\x1eN>Q\x96J\x7f\xaf\xa9\x1aYu\x87\x89\xe5\xfa\xb8\xbd\xba\xc8Pp\x8d"\xb7\x97\x93\xd9y4g\xe5\x92\xebr?\xb3=0,\x9b\xc1\xe9->\xee[\xe1\xf6\x83\r\x96\x821"\tI\xbe\xbf\x14=\x90\x8d\x96XJ\xa5\xcd\xf7P\x96\x80\xa2\xa8\x9cni\xa0\xf6H\xf9\xbe\xb2B\xfb\x8a\x06\x8b\n\xf2\xb8z\xe1\x14\x0f\'f\x9e\x8c\xb1\x85\xc0\xb2,r\x0br\xf0\x1e.\xc4P\x04\x1a\x82\x88i\xf2pk\x93\xc9\xed\x10s;\xdb\xfc^\xf9\x11<\x9a\xfe\x14o\xec\xabqb\xdav\x0cL\x85\xf9\xcf?\x19c|1\xb2[\x83tj\xb0-\xf2p\x07\nq\x04W1\xec\xbd\x91B\x08\x0c\xc3\xa0\xb4\xa8\x80KgZ\x92a\xfbA\xf3\x01\xe9\x08K\xd74\xae^8E^N\x16\xf6c\xa8\n\x01f\xdc \xa7\xaa\x94\xbc\xdar\xcc\x84\x01B\xa0\xa6\xfeM$C\xa1\r\xe6\xa3\x91/1\xfd8\xe3\xe2\x89g\x020m\xc9\x9d\xb1 \x0f\x17"\xa8\xaa@S\x05J\xb2\xe8\x8c%\x05\xb9e\xf5\xe8\xce\x0c\xa4m=il\x84\xa0\xa1\xbe\x9a\x96\x13\xf5_\x01\xf6\xb9\x00x\x9c\xea\xaa+9{\xaa\ti\xef\x95\xa6m\xcb&\x90\x1d \xefh\x05q\x87\xba\xd7\xf3\x93\xfaW\x10l\x19\x06\xf7\x83\xeb\x98\xb6\xcd^t\x90\xca#\xd8qli\xee>K:+\x92\x99\xd5\x1d\xee<\xd8x\xac\x87h\x0f2)aK+ \x90S\x80\x9aBE\xa441\xe0\xf7\xf2\xe6\xc5\xd3x\xbd\x19i<\x0e\x0e@Z\x0b\xfc>\x0fo_9\x8b\xdb\xe5L\xaa\x96\x00\xd30\xc9.=Dqs-\x89\x84\xf1\x95\xf3&\x00\xcb\xb6\xb9\x1f\\e5\x11\x07\x04\xb64\x08\xc6\x1ero\xfeox\x7f\xf4\x1d>\x1d\xff3\xc6\xd7\x7fJ\xd4\\#\x99\x14\x15\xf4\x8c\x87\x19\x99\xdbBS\xc5W\x0c\xa9\x94\x12C\xb8\xc9)\xadC\xd5\xb4\'j\x88U\xe5%\\<\xdb\xba\xfby?\xb4\xcf\xba@\x12\xcd\x13\xf5\xd5\x9cl<\xca\x8d\xce\x1e\x1c\x0e\x9d\x8c\x0c7\xb9\xd5eD=:\xc2\xb2\xbf4&\x99\xed\x13\x9a\xc2\xb6m\xd3\xbf:\x8d\x15X\xe0\xe1\xda\x8f\x99\r]\xc3\x96&\xaa\xe2d9\xd2\xc5l\xe8S2]\xb5T\xe5~\x0f\x8f\xb8L\xd7\x88\x89M*\xf5&\xad\xbd\xc6\x0b\x92\x1ab\xa3\x12\xd6K\xf1\xfa\xb3\x08m\xacb\xa7|\x96\xab\x17N\x93\x9f\x9b\x95\x96\xdc\x8b\x03 Y\xe3\x87\xa2\x82|.\xb6\x9f\xa4\xb3\xbb\x1f\xcb4\xf1f\xf9\xa98}\x9cxZGS\tS\x1b\xd0\x1c\x1a.\xa1\x10]\t\xb2>\xb5\xc1Ow\x86\x99l\xfd\x19\xce\x8c(y\x9e\x93\x94g\xbe\x89"t\xba\xe6\xff\x0b\x91\xc4\x1c\xd1\xc4:\xeb\xd1\xfb\xacO~@\x7fG\x1bnG\x05\xc2{\x08K\x0f\x105$B\xda\x08\x91\\\xc4\xb2,\x1c.?y\xa55l\xae\xaf"\xa5$\xffP6\xaf_h\xdb5~\xfb-\x8e\xec\xbf6H2\xc3s\xf6\xb5&j\x0e\x971\xf2`\x82CU%\xd8\xd9\xdeT\xa8\x99Lkk\xba\x86O\n\xd6\x1f\xcc\xb2\xfch\x9e\xcd\xb1\x19&\x86\xc6\xf1x\xa0&\xff*\x97\xdejD\x91~V#\xbdLo~D\xccXE\x11N\x84b\x11\x8fI\xfao\xbb\x19\xec\xe9\xc6\xed\xee\'\xbf\xb0\x1c\xd3SB \xa7\x1c\xdb\x9d\xcfvB%\x99\x86\x93\x988P<ex\xbd}l\x86\xb7\xb8|\xae\x8d\xaa\x8a\xd2\xfd\xb2\xf3\xec\x00\x08!\x90H\xeak\x0f\xd3\xd6|\x8c\xf1\x99yj/\x9cD:u\xb0mTU\xc1\x153Y\xed}\xc4\xe4\xe84+#S,\xce,\xa0\xea\x1a\x8a\xaa\x10\xda\x94\x8c\rx9yj\x8a\xd9\xed\xf7\x088\x0fS\x96y\x95\x89\x8d\xf7\xd8\x8e\'3N[\xab\x85\x8c\r\xd9\xd86Dcq&\x1f\x8d\xa2*\xa3\xe4\xe5\x17\xa2g\x96\x90\x95\x7f\x18\xd3SB\xc4raX\x12\xb7\xb7\x80\xdc\xa2\nl{\x9c7.\x9e\xfe\xd6\xf4\xd7\xc1\x00 )h\xa7\xc3\xc1\xc5\xf6\x16\x86\x17\x17\xb1\xf2\x03\xb8\x108\x83\x11\xc6;\xee\xb3<2Ed%\xc8\xc6\xea\x06\x8a\xa6\xe2p9S\'#\xa9!]\xbdC4\x8d\x14\xf0\xfa\xb9\xff@@odq\xab\x03\xcbN\x80\x10H[az\xb0\x8c\x8du\x89\x106\x02\x81\x92\xaa\xf4...\xa0\xad,\x12X\x1eC\xb8s\xc8+\xa9F\xcb\xae"\xa6\xe5\x10w\x15s\xfe\x94\x8f\x86\xa3\xd5\xfbf\xfa\xb9\x00\x80=\xf7\xb8\xbd\xad\x91i\x99\xe0\xfe\xd2"\x83\xef}\xc1\xf2\x83\x19\xe2[\x11v"Q\x14MCw9@\xeeYb\t\xe8\xba\xca\xfc\\\x94\xe5\x87u\xc4\xda\xe2\x0c.\xfcG"\xc6"\t+\x82\x10\x92\xe8f\x1e\x83}&\xb1X\xb2\x1f`\xb7\xe5\x0e\xd04\r)a#\x18B\xd9\xdc$\x16\x9c\x07\xed\x0e\xf9\xe5u\x94\xe4\xe7\xf3\x1b\xbf\xfe\x16\x87\xf6\xe1\xf7?\x8d\x9e\xabW8+\xe0\xe3\xd2\x91#\xd4\x1b*\x81m\x03k\'\xc6\xd6N\x14E\xd7\x92]^\xf2\xab\xd7Prs\xf0\xc5\xed.\xee\x0e}DA\xe08u\xb9\xef\xe2T\xb3QT\x8b\xb9\x07%\xac-\xba\x10\xc2\xfc\xea\x82\xa9N0UU1,\xd8\xde\x89\x13\xc8\xd08V\xa0\xf2\xbb\x97ky\xad\xe9\xe8n\'\xea\xb3\xd2s7I\x1d\xad,\xa3\xae\xa2\x94\x1f~\xefun\xde\xed\xe3\xc6\xed\x1e\xba\xfb\x86w[\\4U\xdd\x95F\xba\xcfG\xd7U\xc6\x1f\x85\x88-\xbdEV\xa3\x9f\xb1\x95\xf7\x88Y\xab\xc8D>\xa3\xfd:\xe1p\x02MO9D@\xba\x1enK0\xe2\t22\xdc\xb4\xd4W\xd3\xdez\x82\x8b\xed-\x9c<Q\xf7D{\xed\xf3\xf4\r\xbe\xb0N\xd1\xed\xc8\x0e\xbd\x03\xa3t\xdc\xbd\xcf\xf5\xce\x1e\x86\x1e\x8cc\x9aIi*\x8a\xb2\xdbHi\x18\x92\xf6\xf6b~\xf0\xc7\xb3\xe4\xe5yY\xdd\xe9b\xfc~)\xbf\xf8\xa7R\x96\x96\x83\xe8z\xf2\xdc\xdb\xb6\xbd\xabE\x99\x01\x1f\xa7N6p\xbe\xbd\x99\xf6\x96d\x07\xe9\x8b\xa2\x03\x03\xf0\xe5\xaeM\xd3\xb4\x98\x9c\x99\xe7^\xff\x08\x1f~v\x8b\xee\xfb\xc3l\x86\xb60M\x13MS\x11(x\xbd\x0e\xfe\xfa?\xfd\x90\xc66\x95\xce\x89\xbf\xe1\xc3\xff\x93\xc3\x8d\x0f](j\x02\xc3\xb0\x00p8\xf4d`s\xb6\x95\xab\x17NQW]\xc9\xa1\xbc\xec\'\xd6|\xbc%\xf7y\xe9\x85i@\xd2\x17z2\xf5\xb4\x1e\xdcdht\x82\x0f>\xeb\xe0\xf3[\xf7X^]\'\x12\x89\xa0(\x0e~\xf0\xebG9\xf7;\x9f3?\x03?\xff\xc7Z\x1e\x8c\xad\xe0r\xea\xf8}\x1e\x8eT\x96\xf1\xf6\xebg\xb9t\xa6\x95\x8a\xd2B\xdcnWj\x8d\x17\xdf/\xfcR\xba\xc5m)w\xab\xbf\x90LRL\xcd,\xf2\xc9\xf5\xdb|q\xab\x9b\xc1\xd1)\x12\xf62\x7f\xfc\x97\x1bL\x8e\xf8\xf8\xe0\x7fgRY\x9eO\xd3\xf1Z~\xed\xf2\x19\xce\xb45\x92\x95\x19x\xac\xc5\xfe\xe5u\x8c\xbf\xb4vyx\xba\xc4\xd666\xb9q\xbb\x8f\x8e\xae.\x84s\t3\xee"\xd7\x7f\x987.\x9e\xa2\xe9xm\xb2\xfb\xe4\x1b\xc6\xbfhz\xa9\x00\xa4\xe9i\x8c\xecDc\x0c\x8e\x8e\x91\xe9\xf7SSU\xf1\xd8\xbb\x90\xee>\xff.\xe8;\x01\xe0qz\x1a\x18\xaf\xe2\xa72i\xfa\xce~3\x94\xa6]\xdf\x00v\xebu\xaf\x82\xf14}\xe7\x00\xa4i\xcf\xd1y\xb5\xf4J\x7f7\xf8\xaf\x81\xfe?\x00\xafz\x03\xaf\x9a\xfe/\x82\xe5dP\xc0\xda\xb4\x9c\x00\x00\x00\x00IEND\xaeB`\x82\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x80\x00\x00\x00x\x08\x06\x00\x00\x00:\xff\xfa\xbf\x00\x005[IDATx\x9c\xed\xbd\xd9\x8f\x1cI\x9e\xe7\xf71\xbf\xe3\xbe#2#\xef\x93G\x15Y\xdd\xd5=;=\xb3\xd0jw\x01i\x81\xfd\'\xf4\x97\xe8\x0f\xd1\x83^\xa4\x07\x01\x12 \xe8A\x0f+h\x80\xd5B\x9a\xa3{\xba\xa7\xeb`\xf1\xca\xfb\x8a\xcc\x88\xc8\xb8\xc3=\xfc6=D&+YE\xb22\xc9$\x8b\xd5U_\x80L2\xd2\xc3\xdd\xcc\xedkf\xbf\xdb\x84\x94R\xf2\x0b~\xb6P~\xec\x06\xfc\x82\x1f\x17\xbf\x10\xe0g\x8e_\x08\xf03\xc7/\x04\xf8\x99C\xfb\xb1\x1b\xf0c\xe1%\xd9W\x08\xc4\x8f\xd7\x94\x1f\x15?[\x02\x08\xf1s\x1d\xf2\x97\xf1\xb3 \xc0\xe5l\x97R\x12\xc71Q<\xfdy\xf9\xb9\xaa((\x8a\x82\xaa*/\x88\xf1s!\xc8\xcf\x82\x00/\x06\x158i\x9e\xb3{\xd0`\xf7\xe8\x84\xc1h\x8c\xae\xaa\xac,\xd4Y_Y`eq\x0e]\xffY\xbc\x92\x17\xf8\x8b\xec\xad\x94\x12)!\x8aB\xbc \xc4\x9d\xb88\xae\xc7`0\xe2\xc9\xf3]\x1e\xef\x1c\xb0s\xd6\x9c\x12@(\xac\x1c\x9fq\xd6\xee0\x1c\xdbTJ\x05,\xd3$\x910\xb1\x0c\x03MS\x11B\xfc\xc5\xae\x08\xe2/\xc5\x12(\xe1{\x82\xdc`4\xe6\xf8\xa4\xc9\xa3\xa7;<z\xba\xcd\xd3\xed}\xce\xcf\xbb\x08Sg\xfe\xc1:\xa9l\x9a\xc0\xf1h<\xdfg|>\xa0X\xcc\xb1\xb64\xcf\xa7w\xd7\xf8\xf4\xee:\xabK\xf3\x14\xf2\x19\x14\xe5[eIJ\xf8K\xe2\xc2_\xcc\n \x80 \x08\xe9\r\x86tz\x03\xce\xcf{\x1c5\x9a\xec\x1f5\xd8=8ag\xff\x88\xa3F\x93\xd0\x0f).\xd4\xa8\x97\xb2\xe8sU\xe4\xc8f\xf4t\x87\xc3\xe3S\x8e\x1aM\xce\x9a\xe74\xdb\x1d\xf6\x0eOX^\x9cc\xb1>C\xadZ\xa2T\xc8R\xc8eI$\xac\x1f\xbb\xab\xb7\x8a\x9f$\x01\xae\nuS\xc1n\xfa\xb3\xdb\x1f\xf0\xf8\xd9._?\xde\xe6\xab\'[<\xdf\xd9\xa7\xd9\xee\x12KI\x1c\xc5H \x93M\x91\xab\x14\x10\xb5<\xe1L\x01\x992IV\ndRI\x1c\xd7\xa3\xd9\xeap\xde\xe9\xf1\xfb?}M6\x93\xe6\xce\xfa\x12\x9f\xdcY\xe3\xe1\xfd\r>\xb9\xb3F}\xb6\x82"\xa6B\xa3\xa2\x88\x9f\xbc\xd0\xf8\x93$\x80\x10\x02$L|\x8ff\xb3\xc3\xdea\x83\x83\xa3\x06\x07\xc7\xa7\x1c\x9d\x9cq\xd6:\xa7\xd5\xe9\xd3\xeb\x0f\x98\xb8\xde\x8b\xc1\xd1t\x8d|\xb5Hei\x06-a"U\x81f\xea\xcc\xce\xd5\xd0V\xfa\xec\xec\x1c0\x1a9(!\xc4R\x12\x84!O\x9eK\xda\x9d\x1eO\xb6\xf6X\x98\xad\xb1\xb40\xcb\xd2|\x9d\xa5\xc5Y\x16\xe7gI&,\x94\x9f\xe8\xe0\xc3O\x8c\x00A\x10\xe2y>\xae\xe71\x1c\xd9\xb4\xba=\xb6w\x8fx\xf4d\x9bGOw8<n0\x1c;DQ\x04L\xf7jUUAJb)Q\x14\x85\xccL\x89\xe2\xe2\x0c"a\x91\xd3t\n\x19\x13um\x99S;\xa0q\xd2d4\xb2\x11\x8a\x8a\n\xc4\xb1\xe4\xbc\xdb\xe3\xbc\xdb\xe3\xd9\xf6\x01\xe9T\x92\xd9Z\x99O\xee\xac\xf2\xc9\xddu\xeeo\x0e\xa8V\x8a\xe43i\x12\t\x0b\xd3\xd4\xd1u\xfd\'E\x88\x8f\x96\x00R\xca\x0ba\xeb\xdb\x979\x18\x8d98j\xf0dk\x9f\'\xcf\xf7x\xba\xbd\xc7y\xa7\x8f3q\xb1m\x87\x89\xef\x13\xc7\xf1\x95{\xc0T<\xbc\x80\xaa@)\x8b6[&\x93J\xf2 W\xe2\xd7\xd9"~v\x86?\xfb\x92\x7f\xfa\xa7/\x88c\xc9\x943/\xcb\xc6RJ&\x13\x97\xe3\xd3&\xfd\xc1\x90/\x1e=\'\x93N\xb2\xb1\xba\xc4\xfd;\xab\xdc\xdf\\aei\x8eZ\xa5\x84\xa2\xaaW\x9e\xffq\x0b\x8d\x1f-\x01\x84\x10\xf8AH\xaf7\xa0\xdd\xed\xd3\xe9\xf69<9e\xef\xe0\x84\x9d\x83\x13\xf6\x0f\x1b\x1c\x9e\x9c2q=TE\xf9AU-\x99H\x90\xaf\x95\xb0J9\xc8$\xd0u\rM\x08b\x05F\xa6\x82\x9dM\x90+\xe7\xc9vz\xb8\xae\xf7=\x02\x00\x84QD`\x87\x8c\xc7\x0eRv@@\xbb\xd3\xe7\xac\xd5f\xef\xf0\x84\x95\xc59\x96\x17\xeaT\xcb\x05\xca\xc5<\xa5b\x9e\x84e\xbe\xcf\xd7\xf4\xce\xf8(\x08p\xf9\xb2\xe3X\x12\xcb\x98(\x8c\x08\xa2\x88\xfe`\xc8\xe3g{|\xfd\xf89_?\xd9\xe6\xe0\xe8\x94v\xa7G\x10\x86DQL\x1cK\x0c]\x7f\xe9\x1e\xaf\xbe?d\x8b9\x167\x96HW\xf2HM\x10\nhL\x1c\x9c(\xe4\xcc\x9bp"\'T\x96fqG\x0e{{\xc7D2~\xe5\xcc\x15B\xa0(\x82\xcb\x95\xa9\xdd\xe9\xd1\xeb\x0f\xf8\xf2\xd1\x16\xf9|\x86\xc5\xb9\x19\xeeo\xae\xf0\xe0\xfe\x06\x0f\xefoR\xab\x94\xd04\x15UUP\x15\x15!.\x05F\xf1Q\xac\x0c\x1f\x05\x01.g\xae\xed84[\x1d\xf6\x8e\x1b\xec\x1d\x1c\xb3\x7f\xd4\xe0\xf4\xf4\x9c\xb3\xf3\x0e\xadv\x97\xe1\xc8\xc6\xf5\xbc\xef}\xef\x87 \xa5D\xcf&I/V\xd1\xb3IB`\x1c\x04\xf8\xd1\x98\x96\xab T\x85B:\xc5\xdc\x9dU\xc4\xc0a\xef\xe0\x84W[\x16.\xef\x07\x97[K\x18\x86\x04\x81D\xe2\xe1z>\x8e3\xa1\xdd\xe9\xf1l\xe7\x90\x7f\xf8\xc3\x97,.\xcc\xb2\xb2Xgya\x8e\xf9\xd9*\xd9l\xfa\xa3\x92\x11~\x14\x02\\\xce\xd60\x8c\x98x\x1e\xae\xeb1\x1a\xdb\x1c\x9f\xb6\xd8\xd9;\xe6\xf1\xb3\x1d\x1e=\xdda\xf7\xe0\x18\xcf\xf7\xa7\xd7K\x01\x02\x14Ep\x13\xd3\x95P\x14,]\xc1,\xa4\xd1g\x8b()\x8bXJ\xfc8B\x11\x90\x14\x1a\x15#A\xae\x98\xc4\xd2\x92\xf4\x1am\x12\x96A\x14\x86/\xb5\xf5\x8d\xcf\x10\x02E@\x18\x85\xf4\x06#z\xfd!;\xfb\xc7\xe8\x9aF}\xa6\xcc\xa7w\xd7\xb9\x7fw\x8d;kK\xcc\xcf\xd6\xc8\xe73$L\x0b\xcb20\r\xfd\xe2\x1e\xf0:\xc2\xbdO\xfc(\x04\xb8\x9c\xb9\xce\xc4\xe5\xc9\xd6\x1eO\x9e\xef\xf2t{\x8f\x9d\xbdc\x9a\xed\x0e\x93\x89\xcf\xd8q\xf0\xbc\xe9\xe0_h\xfd/\xc9s\xd7\x81\x94\x12S\xd7(\x97\n\xe4j%\xe2b\x06\x0c\x1dU\x08R\x9a\xcef6\xcf\xaf\neJ\x86E\x10F4\xd2#\xd23%J\xa5\x02Q\x18\xe1L\xdc\x1b<\xeb\xdbg^~\xe0\x07!g\xad\x0e\xa3\xb1\xcd\x17\xdf<\xa7\x90\xcb\xb0\xbe\xb2\xc0\x9d\xf5%\xeem\xacqwc\x89\xd9Z\xe5f\x9d\xbae|P\x02\xc4Rr\xd8\xe9p\xd0l\xe1\xf5\xc6\xb4N\xdb<\xdf9`\xe7\xe0\x98\xc3\xa3SN\xdb\x1dl{\x82\xa2(W\xf6\xcaw\x80\x04\xdd\xd4)\xcfW\xc9\xd6\x8a\x08S\x07UAA`(\n\xa6\xa2\xa0"\xe8\xf9\x1e=\xcf\xa5\x11\xb8\xb8i\x93\xea\xe2,\xf6\xc4\xbd\x11\x01\xbe\xf7h)\x01\xc9\xc4\xf5\xb0\x1d\x97Xv9\xd64\xda\x9d\x1e\xc7\x8d\x16\xfb\x87\xa7l\xed\x1c\xb2\xb44C.\x0f\xd5J\x91\x85\xea*\xban\xbc[\x9fo\x88\x0fJ\x800\x8a\xf8\xe3\xee.\xff\xc7\xdf\xff\x13\xed\xc7\x07\x0cN\xda\xf4G6a\x10\x12\x85\x11\xb1\x8c\xd1\rm:\xd9\xdf\xd1E!\x84 &F\xb3L\xf2K\xb3\xa4\xaaE"!\xa6SU\x11\x08\x14\xfa\xbe\xcf\xa3~\x87\x86\xeb\xd0r\'DH\x14Cen}\x89N\xbbK\xbby~+\xfdVU\x05U(\x08.\x84\xc6\xc1\x80\xc7[[d\xd2)j\xb54\xab\x9b\n\xbf\xfb\xcdC\n\xff\xbaBA/]\xa8\xc0\x1ff;\xf8`\x04\xf0\xfd\x80N\x7f\xc0\xb9c\xd3M\x08Zw\x8a\x84\xf3I2\x03\x0f\xbf\xd1\xc3it\xf0\xc7.q\x181\x95\x90\xc5;o\x89\x86\xaab\xa6\x13(\xf3eD9\xfbB!\x8fc\xc98\xf4\t\'\x11\x1do\x82\x14P6-f\x13)*\x99\nza\x96\xf1~\x83\xdd\xa7\xbb\xefL\xc4\xcb\xe7\xc9\x18\x14M\x90J\xa8\x94k*s\x8b\x82|\xb9K*\xdb\xc2Pr\xb8\xfe\x98\xd1hL\xd2\xccb|@\x97\xf4\x07{\x92\xedL8<i\xd2nwp\xe3\x88\xc9z\x19,\x9dl? \xde:E\x18\xa0\xf5\x1c4\xdb\x870$r\x03\xa2 \xe2F\x12\xdf\x15\x08E\x90J&I\x97\xf2\x88r\x16\x99\xb6 \x98\nv1S!P\x00\x86\xa2R3\x13\xd4\x93i\x96\x93i\x8a\x86I\x94\xf3\x99\x99\xa9\x90\xca$q\x1d\x970\x8c\xde\xba\xdf\x9a.HX\n\x9a!1-I\xb1\x1c\xb0\xb8\x1aq\xe7S\x85Bm\x8cT\x1c\x0e\x9f\x1at\xbb\x0e\'\xa7m,#K\xa5\x94\x7f\xeb\xe7\xdd\xb8}\x1f\xeaA\xfd\xe1\x88\xaf\x9el\xb1\xf5\xe7\xc7\xb4\x07-:\xc6<\xee\\\x96f""\\\xcf\xa0\xd4W\x99\x8f\x0cr\x03\x1fNz\x0cw\xce\x18\x1e\xb7\x88\xa5\x9c.\x047X\x12\xa5\x94(\xaaJua\x86\xd9\xd5\x05TC\'\x8a\xbfU\xebT\xa1\x90\xd65\xd6\xd3y>+\x94\xa8ZILEa\x12E\x9cy\x13\xf6G=\xe2R\x86\xd5\xf5e\xf6\xb6\xf7\x19\x0e\xc67Z\x92%S\xadE\xc6\x90+\xeb\xdc\xb9\x9f`n)\xa4X\x1b\x81u\x82\x9e\x18a\xa6TbCb\x0fL\x1e}a\xc3\xb8\x85\x11>\'af)\x97r|\xa8(\xc5\xf7N\x80\xcb\xfd\xac\xdb\x1b\xf2\xd57\xcf\xd9{\xba\xcfDzX\xce,\x11\n}-D\xe6\x0c\xd4\xbc\xc9P\x98`\xc7\x90V\tS\nz%\x89\xe1F\x08\xdb\xc3?\x1f\x11\xb8\xfe\xc5\x16\xf1\x06\xa7\xbc\xb8\xfc\xb5 9S$\xbdP!\xd6\xb5\x0bG\xfe\xf4\x12U\x08\x92\x9aN\xd14)\x9a\x16\x91\x8ci\xba\x1eMwBcbs<\x1e\xa2Ur\xcc\xaf-prr\x86\xec\x8fP\x14\xe5\xb5\xdb\xc1\xe5\xc7\xaa*\xb0,\x95|Q!W\x90\xa8\xc6\x84r\xcdcquL\xb5\x1e\x90+\xd9\x84J\x97\x9012V\x80\x02\xa1\x9b\xa1\xdbV\xe8\x9f\xf5\xc9g\x9f\xb3\xba\xb4\xc0g\xf7\xd7?\x98F\xf8A\x08\x10\x86!\xedN\x97\xa7\xcfw99m!\xf2If|\xc1$\xd0p\x94\x00\x9f\xa9K\xf7\x8c\tM\x1d\xc4\xacA\xa6>O)\\"?\x0cQ\x8e\xba\xf4\xbe\xdaG\xb6\x87\x04\xae\x0fq\x0c\xb1D\xc6\x97\x03\xf2\xb2\x8a(\x84@\xd5\xb5\xe9\xd2_\xcb\x83\xae\xbe\x18%\xc9\x94;\xbaP\xf0\xa2\x98c\xc7\xe6\xc4\x19q\xe8\xd8\x0c\x03\x9f \x8e\x101T+y\xf4\x959\x12\x7fz\xf4\xbd\xd9\x7f\xf5\xbf\x8a\xc2\x85[Xb%\x05\x85\x92\xe0\xce}\x9d\xf5\xbb\x11\xe9\xd2\x045\xd1%\x12}\x145b2\rS\x024$\x82\xc8+\xe2\x8f\xe6 \x0e\x19\xd9c\x9e<\xdf\xe5\xe4\xf3\x07\x04a\x84\xae\x7f\x98(\xa4\xf7N\x00?\x0c8<j\xb2\xbdwL\xaf?\xc4\xf3<L\xcf@k\x0eQ\xf3\x16\xb2\xa2 5\x05\x04\x84\x00*\xa0)\x8c\x15\x05i\nlME\xa8\x19\xdc\xc4\x02\x19;\xa2\xec\xc6\x88\xf31~s\xc0\xa8\xd1!\xf4}\x10S\xb5\xf1\xe2/2\x99$\xe5\xb9\x1a\xc9J\x01R\xd6K\xb3I\x00\xa1\x94\xf4}\x8f\x1d9\xe0\xd4\x9d\x0e\xbc\x1f\xc7\xe4u\x83\xaa\x95\xa0f&(\xa8\x1ama\xb15_\xc7\xee\x0e\x18\x8e\xa6^F)\xa7\xfc\xbb4\x14V\xaa\x16\xb3s\x1a\xa5\x99\x80Tn\x8c\x91\xeaP\xaa\xc5d\xcb`$l\x84\xea\x10J\x17)\xe3+-\x00b\xe8\xb6T\x8ev\x0c\x9cqL\x10\x04\xf4\xfaC\x0e\x8eN\xd9\xda;dqn\x96L:\xf9\xbe\x87\xe7\xfd\x11\xe02t\xca\xf7\x02\x9en\xef\xf1l{\x1f\xd7\xf3\x01\x81\x0cB\xbc\xa3\x0eaJ\xc3,\x94\x89\r\x85\xf0\x8a\x17\x0f\t^\x18\xe2\xc1\x94\x10E\r\xa5X\xc6\xc0@\xf5U\xc4q\x0fu\xdfBU%b\xec\xa2F\x10N<b?DJI&\x9fefu\x8ed!\x8b\xd4U\x88_^\xba\xc38f$\x03\xbc8"\x11j$5\x8dz"\xc5\\"E=\x99\xa2jX\xc4\x8a\xc0-8\xd4\x16g)\x9e\xb5\xb0\'.q\x1ca\x98\x82DBA7b4#dy5`\xf5N\xcc\xdc\xb2O2\xdf\xc7W\x1a\x081\xedg\x80DL\x95\x1a\xae\xb2P\xa0 \xa5I\xa7\xa9\xb2\xb7\x15c\x8f \x8ec\\\xd7\xe7\xe0\xe4\x94\xaf\xbe\xd9"\x97I\x93I\'\xdf\xbbJ\xf8\x1eW\x80\xe9\x14\xf1\x83\x90g\xdb\xfb<\xdf=\xc0\xf3\x03\x84"\x88\x82\x90\xfe~\x0b%\xa5Q\xf9\xb4NOQ\xe9E\xde\xcb\xfb\xdew\xfa\x1c\x03\x1dBl=$\xae\x1b\x98\xc5\x19\xf2\x9f\xceP\x18\x85$\xda\x0e\x83\'G\x8c\x8e\xdaDA\x88\x9eK\x91Z\xac\xa1g\x12\xafT"\x14!\xd0\x85\xc2\xac\x95b=\x93c%\x9d%o\x18\xf8qL\xc7\xf7\xf8s\xef\x9c\xa67\xa1\xdd\xef\x11T\xb3$k%8<E\xd3\x15*U\x83\xfb\x0fLf\xe6]\x92\x85\x11F\xea\x14-1FMHB\xd5G\x88\xe0E\xff_\xe3I@!\x89F\x8da7\xc9\xd1\x81\x8bcO\x07Y"99m\xf1\xd5\xe3-\x1e~\xb2\xc1<\xb5[\x18\x877\xe3\xbdn\x01\xae\xe7\xd3jw\xd9;8\xa1q\xda\x9e\xaaSB c\x89o;$\x06\x13\nv\x84\x9fP\xe9]\xe3~\x1e1\x9e\x02$\x15\xbc\x94\x86\xa6Y(n\x8c\x9fO`+\x01Q\xd1"\xe1\xc7d7\xe6\xc9\xceW\xf1\x93\x16\xc1\x05\x03\xae\x0e\x86\xc2T\x08\x9c\xea\xfeItEa\x18\xf8\x9c{.\x8d\x89\xc3\xb13\xa2\xed\xba\xb8\x81Of\xa6\xc0\xfc\xbd"Z\xa4"\x18P\xac\x0cY\xb9\xa3S\x9eq\xb1\xb2\x03"\xfa\x04\xb1}E\x0c\xf9\xe1\xd9\x1a\x85\x06\xde\xa0\xcc\xa8\xa73\x1e\x85\xbcX\xfc$\xb4\xce{<\xdb\xd9\xe7\xac\xd9a}y\xe1\xc2\x93\xa8\xde\xe8\xbd\xdf\x04\xef\x95\x00\x9dn\xff"\x18\xb3Eo0\x9c\x9ax\x01\x98Z\xe3\xb4 "u\xee`\x9a\x12\x91\xbe\x81\xa9_B c\xda\xbe\xc3\xb9\x00\xa5\x00\xe2\xf3\x1a\xf9\xa8\xce\\h0S\xacQ\xae\xd6\x18F!\xa30\xb8\xfc\nRNU4M\x11\xa4t\x8d\x84\xa6\x11J\xc9\xd7\x83\x0e\x07\xf6\x88\xbe\xe7\xe1^l\xf0\xb1\x94\xa4,\x93r6\xcfR\xee\x9c\x87k\x16R\xe9!\xcd&\xaa\x1a#\x95\x187\x94 ^\xef5|%\x04\xb8\x8eN\xe78\xcd\xb8\x0f\x88\xf0j\xb7\x18\x0cG\x1c\x1c\x9d\xb2\x7ft\xc2\xe6\xda"\xd5J\xe9\xa7I\x00)\xe1\xe4\xb4\xcd\xd7Ov\xe8\x0f\x86\xc4\xb1\xe4Et\xb5\x9c\xee\x83A\xcf\xa6\xff\xe5\x1e\x9e\x98A\xbb[&D^\xdb\xf2&\x81\x08\xa6\xef^\x05\xa1)\xe8f\x92\xb5T\x8d\xbf.\xcd\xf3i\xbe\x8a\x1d\x064]\x97\x96\xeb\xd0\xf6\\z\xbeK\x14O\x8d@}\xdfgW\x0ei\xb9\x13\xba\xbe\xc7 \xf0\x08\xe2\x98\xb4\xa6S\xb5\x92\xd4,\x8b\x8a\x95\xa4lZHo\xcc 7Og\xb2\xcb0\xf4\xa7\x02\x9d\xbc\xe1\xc0\x03\xa0\xa0+:\xed\x9e\xceW\x7ft9>P\x91\xf1\xcbW\xc4\xb1d\xe2\xba<\xdf;byq\x8e|.\x8bi\xe8\xefM\x16x/\x04\x90R\x12E\x11\x87\'\xa7|\xfdd\x9b\xd1\xd8\x9e\x06Q\xbc\x94\x90\t\xfexB\xff\xf9\t\xf1l\x92\xf4\xdd\x1acB\x82\xd7\xdf\xf6\xb5\x10\x80\x8ccR\xaa\xc6\'\xe5*\xbf\xad\xcc\xf20S\xc6\x8b"\x9a\x9e\xc3\xeex\xc4\x81=\xe4d\xa2\xe2\x84!^\x14\xe1G!ga\x00B`\x08\x85\xa4\xaa\x9144j\x89$K\xa9\x0c+\xe9,\xf5d\x92\xb4j`\xbbc\x0e\xd5M&\xf1#\x06\xfe\xd5\xa7\xde\xbc\xa5\xaa\xcc\xe2\x0c\x12l?\xf3\xe8w44\xfd\xa5\x17\x87\xa2\x08\xc2(bk\xe7\x80\x85z\x8d\x87\xf77\xde\xab6\xf0^\x08\x10F\x11\xb63a\xf7\xf0\x84GO\xb7\xb1\x1d\xe7B\xc8y\x19RB\x1cF\x14B\x85Z\xa4\xb3\'b\xfa\xe2\xe6fW\x01H!(\x18\x16\xbf\xc9\xd5XM\xe6P\x84\xc0RUf\xad\x14y\xdd\xe4^6\xcf0\x088\x9d\xd8\x1c9c\x0e\x9d\x11N\x18\x92PU\xea\x894\x0b\xc9\x14s\x8949\xc3$\xa1\xaa$4\r\xf3b\xcb\xb2\xf4\n\xd5\xf4\xe7\x9c\x8e\xfe\x81\xa98\xfa6\x90\x10k\x84\xde\x0c\x91\x9bC\x88\x10\xa1|\xef\n\x10\x82\xe0Bp\x9e\xa9\x96\xb0\x9d\t\x95R\xe1-\x9f\xf9\xc3x/\x04\xb0\x9d\t{\x87\'\x1c\x9f\x9c\xd1\xed\xf5\x11\x97z\xfaw!%2\x02}\xe0\x91j\xdah\x05\x01\tn\xec\xf7W\x15\x85\xaa\x9e`=\x91g1\x91\xa1\xa0\x9b\xc4L-~\x9a\xa2\x90\xd4\xa6\xdd\x8c\xe2\x98\xa21\xb5\xfeU,\x8bI\x18a\xaa*5+\xc9l"I\xd5J`*\xdf\xddo%\xba\x96"#\x17\xc9\x9a\xcb\xa4\x8c:npN$\xfd\xef\xb5\xe3M\x10\x02\x82H\xd0o$8o$\x89\xc2\x11\x17F\xe3\x97\xafc\xaa\x12\xf6\xfaC\x8e\x1b-\x0e\x8eN\xc9e\xd2\xe4\xb2\xe9\x8f\x7f\x0b\xb8\xdc\xa7z\xfd!\x7f\xfe\xfa\x19\xa7\xcdsTU\xfd\xc1}=l\x0f\xf0\x9e\x9f\x11\x7fRD$\xac\xe9\xf57\xe8\xab.\x14\xee\xa5\x0b|\x96\xab\x90\xd1\xa6\xfe\xf4\xab_\xbf|\xba\x10\x82\xb2eQ0M\xeed\xf2H$\x82i4\x8f*\x14\xd4+\xab\xd4U\xad]\xa0\xa2\xabI\n\x89M*\xa9\xcfh\x8e\xff\xc0$8gZ_\xe3\x1al\x95\x02\x14\x08}\x85\xdd\xad\x98\xfd\xed\x88\x8b\xdd\xe7\xd5_\x9f.\x05\x0cGc\xbe|\xfc\x9c|.\xc3\'\x99\xb5\xf7R\xcd\xe3\xbdT\x08\xe9\x0fF|\xf1\xe8\x19\x8df\xfb\x1aWK&\xe7#F{gd\xdd\x98\xa2n\xa2]\x93\xe9\x02@J4\xa1p7]\xe0\xb3l\x99\x94\xf6}N_\x86p*B\xa0\t\x05SQIj\x1a)M\'\xa9iX\xaa\x86\xae((\x17\x85"^\xf5t\x05\x8d\x9c\xb5F9\xf9\x10MI#\xe5\xf5\xb7*\t\xe8"\x87\x1a\xce\xd0j(\x9c\x9d\x06\x84\xe1\x9b\xaf\x17\x02\x86#\x9b\xaf\x1fos\xdch^\xfbY7\xc5\xad\x12 \x8e%~\x10\xd0lwy\xb6\xb3\xcfy\xa7\x7f\x8do\t\xdc\x91\x8ds\xd6\'kG\x94#\r\xf5\x06[\x80\xa6(\xe4t\x93\xcdT\x9e;\xa9<\tE\xbb\xb8\xeb\x9b!\xaf\xfc\xb9\x16\x84B\xc6X\xa0\x94\xbcOB+\xa1\x08\xe3Fb\xa0\xf4\xf3\x04\xe3\x19z]\x95\xe1\xc0\'\x8e\xe5k\xfdY\x97+\xa9\xed8<\xdf\xd9\xe7\xf0\xe4\x14\xc7q\xa75\rn\xf0\xcc\xeb\xe0V\t\xe0\xfb\x01\x07G\r\xb6\xf7\x8eh\x9dw\x99\xb8\xd7\t\xa9\x9a\xaaS"\x8aI\xf6\\\x92=\x17\x11\xffp7/\x02\xab)\xea\t\xee\xa6\n\xac\xa5r\xd4\xcc\xa9Q\xe7:\x10W\xfe\\\xebz\xa1b\xe9e\xb2\xd6*9k\x95\xa4QE\x88k\xea\xe7\x12\x86]\x8b\xd6q\x06\x7f\xa2\xbeb\xe7\x7f\xd5\xf3\x04\x9e\x17\xd0lu\xd8?:e\xff\xa8\xc1\xd8\x9e\xdc\xba\x93\xf0V\x08p\xb9\xc5{\x81\xcf\xf3\x9dC\xb6w\x0fq\x1c\x97(\xba\x86\xc4|\xa9NG\x11\xde^\x0b\x7f\xb7\x85\x1a\xc4W\x8cF\xaf\xff\x9a*\x04u+\xc5g\xd92sf\x1aSQy\xf3\xb7\xde\x1e\xd3-D#\xa1\x95)$\xee\x921WP\xc4e\xfc\xde\xeb\xd7\x12\x81\x82*,Z\xa7*\xcf\xbf\x91\xd8#\x89r\xcd&Fq\x8c\xe3z\x1c7\x9a<\xdd\xdeg0\x1e\xdfFW^\xc2-\xad\x00\xd3\xceO&\x1eO\xb7\xf7\xd9\xd9?"\x8a\xa2\xa9\xeaw\xcd\xb0\xea\xc8\x8f\xe8>9b\xf0\xf8\x10\xd3\x97Si\xfc2\xb5\x8ao\xf7p\xf5\xc2\x8e\x9fRu\x8a\x86\xc5f:\xcforU\xcaF\xe2v\xba\xf2\x03\xd0\x14\x8br\xf2S\xca\xc9\xfbXZ\x11]M\xa2\x08\x13!\xf4\x0bmG\xe1\xea\xba\xa2(\x06\nYN\x0f\x05_}1f8\x8c\x117\x0cm?k\x9d\xf3\xe8\xc9\x16\xbd\xee\xe0VB\xd4^\xea\xcfm\xdcD^\x84@\xb7;=\x9eo\x1fpp|JxA\x80\x1b\xdc\x85\xd0\xf3\xd1\'!\xb3\x81J\'Rp/>\xbfL\xc4\xb0T\x83\x8a\x91`5\x99c#\x95\xe7n\xba\xc0\xbdt\x81\x8dd\x81\xa2\xfe\xbe\xf3\xf6/2\x8c\xd5$\xa5\xe4}45E1q\x8f\xbe\xbbM\xdf\xdda\xe8\xeea\x07g\x04\xd1hj)\x14\n\x02\x89\x0c\x13\xc4\xce,\x9em\xe2Nb\xae\xb9C\xbd\x84\xd3f\x87\xaf\x1fo\xf1\xaf\xff\xd5\xaf\xb8\xb3\xbe\x8c\xaek/\x15\xadx\x17\xdc\x1a\x01\xfa\x83\x01\x87\'\xa7\x1c\x9e\x9cr\xde\xed\xa3\xbdB\x1a\xffA(\nf\x04\x85A\x88\x97\xd2\xe9\x98\x02M\xd5\xb0\x14\x8d\x84\xa2R\xb7Rl\xa4\n|\x9e\xab\xf0\xdb\\\x8d\xdf\xe4\xcad4\xf3\r9<\xb7\x0fU\x98\xa4\xcdE\xd2\xe6\x023\x99\xbf\xa6\xeb<\xa6m\xff\x99\x96\xfd\x05\xbd\xc93l\xff\x84 \xb2\x89b\x9f\x88\t\x9em\xe2\xb4\x8a\xb8\xb6DQ\x9c\xb7ji\x7f8b\xff\xe8\x94\xa3\x93&\x9d\xde\x80r1\x8fa|D\x04\x88\xa5\xe4\xf0\xb8\xc9\xe3\xa7\xbb\x8c\xc6\xce\xdb\x19,.V\xb6h4\xc1{~\xc2D\x14\x11\xcb\x19V\x92Y\x1ef\xca<\xcc\x96\xb9\x9f*\xb2\x92\xcc\x92\xd3M\xb2\x9aNB\xbd\xc8\xaa\xb9\x8dN\xdc\x18\x02Eh\xe4\xacU\x12z\x85\xd9\xcc\xdf2\xf6\x1b\xf4\'\xcf\xe88\x8f\xe9L\xbea\xe0>\xa5\xd9\xf5y\xf6/!\xa7\'\xe2\xc2\xeaps(\x80\x1f\x86l\xef\x1f\xf1t{\x9f\xdf~v\x1f\xc3\xd0\x7f\xf0{\xd7\xc1;\x11\xe0r\xe6\xc5\xb1\xe4\xe8\xe4\xec\x85\xdd\xff\xba{\xffw\xa1\x1b\x1a\xa6\xa2\x93p\x14V\xe34w\xd3s|^\x9e\xe1\xd7\xf9\n\xf7\xd2\x05\x96\x13Y\xf2\xfa\xc7\x93m+P0\xd4,\x86\x9a\x05 c.\x911\xe6\xc9\x98K$\x8dEPj\x1c\xe10\xf6J\x84\xb1\x83\xa9G\x84aL\xfc]\x0f\xd0\x1b /"k\x82 d{\xf7\x88\xe5\xf9Y\x1e\xdc]\x87L\xeaV\x1cD\xef\xb6\x02\\x\xc4\xc20\xe4\xf0\xe4\x8c\xc7[{\x8c\x9d\xc9\xb5\x1a\xf5\xe2\x1a!P\x10\xa8\x9aJ:\x95$\x9f/R\xcd\xcc\xb0\x91Y\xe3a~\x93_\xcfT\xa8gS\xe8BAS\x14\xe2+\xf3\xe8\xe3I\xb1\x9c*v\x8a\xd0I[\x8b\xa4\xcd92\xd6\xaf\x18\xc5\xbf\xc1\xca\xefc\xcd5I\x8eN\xf0=\x89\xedL\x90\xde\x85\x8b\xfa"{\xe8\x87\xb4B!\x04a\x10\xb2sp\xcc\xe2n\xed\x9d2\x96\xbe\x8bw"\x80\x10Ss\xe5\xee\xc11\x87\xc7g\x0c\x87#\xc27\x99\xb8\xb8\x9a\n\x1ec\x99&\x85B\x8e\xb9\x99*\x95j\x85\xd8,\xe0\x92f\x14\x9a\x0c\xed,nO#1g\xbc0\xef~\xbc\xb8\xb0 \n\x15\xc14\x05\x1cE\xb0\x1b\xa6\xf9RK\xf1\xb4\x9ed`T\x91\x0bi\xb2}\x17\xab\xeb\x12w\xc7\xd8\xfd1\xb6\xed\xbcd\xaa~\x1d\xe28f0\x18q\xdch\xb1{pL&\x9d$\x9f\xcb\xfc\xc8+\x00\xd0\xe9\r\xf8\xf2\xd1s\x8e\x1aM\xfc  ~\x83\x11G\x08\x81a\xe8\x98\xa6\x89\xae\xe9$R\x19r\xc5\n\x9b\xf7\xd7\xb9\xb7\xb1J\x94\xa8\xb0\xdf\x15\xfc\xfei\x87\xfd\x9eJ\xa1\xe1\xf2\xab\xe5\x80\xf9\xf2\x85*\xf8\xf1L\xf97`\xba\x1a\x0c"\x8f\xaf\x9d1\x7f\x94\x13\x0eK\nA1O**\x90\xebG\x98\xcd\t\xf1Q\x07\xbf\xd1A\xeb((A\x8c\x0c"\xc2 \xb8\x12\xe9\xfc2b)\t\x02\x9fv\xa7\xcf\xa3g;\x94Jy\xb2\x99\xf4[i\x15W\xf1\xce\x04\xe8\xf5\x86|\xfdd\x9b\xb3\xd6\xf9+\x972y\xe5/UQ\xa8\xcfTXYZb\xb6>\x8fM\x86\xa7m\x95\x91U\x82T\x8d\xcd\xb9\x02\xc9t\xc0\xbf\xec\xf48\x1f\xfa\xec\x9e9t\x86\x01~\x18c\xa8?\x8db\x8dR\x82\'#\x9a\x9e\xcb\x963\xe4\xc8\xb5\t\xa4$\x16\x12G\x81\x83\xac@3M(WH\xad\xe5\xc8\xf6\\r\xe7.a\xa3G\xfb\xa8\x89\x1f\x06/\xd8\xfe\x92CKN\xb7\xbe\xe1h\xcc7OwX[\x9a\xe7\xde\xfa\xca;\xb7\xf7\xad\t\x10E\x11\xae\xe7\xd3h\x9e\xb3\xb5wH\xa77\xf8v\xfc/B\xaf\x0c]\'\x910)\xe6s\xa0Y\x8cB\x83l}\x8e\xd9\xd5e~\xf7p\x9d\x8eg\xb1\xfb\xcf=\xba\xbeAc\xa8\xf0\xebM\x93EU\xa3\x941\xe8\xdb\x01\x9d\xb1\xcfQg\xc2Y\xcfe\xb6h\xbe\xc2U\xfb\xf1A\x02\r\xd7\xe6\xe9\xb8G\xc3\xb5q\xa3\xe0EU\xb3HH\x86:`\xa8\x90\xd1\x08\x8b\t\xd4J\x06\xb5\xec\x12\xe7t\x82\x8c\x821\xf2H\xb8\x11\xe1\xd8%\x9c\xf8\x04a0\x8d\x1a\xba\xc8\x96\x1e\xdb\x0e\xcfw\x0e98j0\xb2m\xb2\x994\xda;\x84\x8c\xbd5\x01\x82 \xe4\xb4u\xce\xfe\xd1\t\'\x8d\x16c\xdbyQ\xa7g\xfaG!\x99J2S+\xf3\x9b\x07w\x10\xa9\x1a\x8f\xcf\x13hV\n\x99-\xb0\xb4\xb4@\xd9\x93\x94\x9f\xd9\x9c\xf6<\x1e\x1f\r\xf9\xf7\x0f\xca\xe4S:\x8b\x95\x04};\xc0\rbvNm\xe6\x8a\x16\xc5\xb4\x81\xf9Q\xd43y3B\x19\xb3e\xf7\xf9}\xff\x8cA\xe8\xbd\xfa\xa2\x8b\x15\xd1Va\x92\x86\xd3\x84\x85Z\xab`\xdc)0\xdb\x0b)7\'\xb8\x07m\xec\xb3>\xf1\xd8&\n\xa3\xcb\x80F&\xae\xc7\xd1\xc9\x19\xfbG\xa7\x9c6;\x18\xbaN:\xf5\xf6\x11C7~\xa5\x97\xaa\x9f\xe7\xf9l\xef\x1c\xb2\xb3w\xc4\xd8q\x08\x82\x80\x84eP)\x15\xc8\xe4\x8aX\x99\x02\x8e\xcc`\xe5\xcb|\xfa\xab\xbbd\xb2y\xe2\x1d\x8f\x83\x8eO\xdb\x86\x91\'\xc8X:\xf7\x16\xb2\xb8\xc1\x80\xde8\xe0\xf0|\xc2r-\xc9F=Mg\x1c\xf0\xf4h\xc4Vc\xccL\xc1\xe4\xd7\xab\xf9\xe9\xf3\xdf\x90\x15\xf6c\xe2\xf2\xbd\x84\xb1d\xdb\x19\xf0\xc7A\x93^\xe0M\xa3\xa0_\xf3\x9dH@\xa4\n\xd0@\x18:\xa1\xa5snEL2\x06~YC\xed\xe6Hw]\x8c\x9e\x83\xd2\x9b0\xea\r\x998.\x9e\xf489m\xf1dk\x8f|6M:\x95|kc\xd8\xcd\xe7\xd4\xc5\x08\xb8\xbe\xcf\xd3\xed\x03\x0e\x8e\x9b\x18\x86E2\xad\x91\xc9\xa4YY]d~~\x81Ly\x8eg\x1d\x93q\x94$[]f\xbedq?\x1c\xd2\xb1;4\xfb\x1e{gc6\xeai>]\xca\xd2\x1ez|\xb1;`\xab1&a(\xac\xd6R\x9ct\\\x9e\x1e\x8dht]\x0e\x9a\x13\x06v@>\xa5\xa3^\xd7\x93\xf2\x81!\x00?\x8e\xe8\x86.{\xf6\x80-\xbb\x8f\x1d\x05WL?\xdf\xfa\x00/=\x99\xf2\xe23q\xb1"\x84\n\x9c\xa7\x14\xdaI\x03j\x06i7G\xba\x17a6mDc\x80r$\x10}\x05C\nZ\xfd\x01_=~\xce\xe6\xea"\xf5\x99\x8b*#o13\xdezQu=\x9f\xa7\xdb{\xb4:}\x16\x97W\x89\xcc"\x99b\x8d\xdf|\xb2\xc4\xd2l\t+\x91\xa0\xf7\xcd\x80\xd6\xa1\xc3\xe3\xc3!\xa6\xae\xf0`)\xcbq\xc7\xe5\xe8\xdc\xe5\xab\xfd!\tC\xe37\xeb9\xf6[\x0e_\xee\ryv2"\x97\xd2x\xb8<\xcbReB\xcaT\xe9\xdb\x01\xe7#\x8f\x9d3\x9bTB\xa3\x9a3>X\xe6\xecM\xd1\t\\\xbe\x1c\xb49\x98\x0c\x99D!\xd1e\x0e\xd9e\x84\xc7E\x81\ny\xe9\xdf\xb8\xf8L^\\s\xe9C\xb8\x1cH[\x87\xed\xbc\xc0H&1f\x0c\x8c\xb5\x0c\xd9\xaeG\xb9\xeb3j\r\xf9\xe3\x9f\x1f\xf3\xef\xfe\xf6\xaf\xde\xda\xf0\x06\xef\xa2\x05\x08\x05\xa1\xa5\x10\xa9\x1azq\x15\xd5*\xa2dJxz\x15_\xcb\x9015t}\x82\x1f\x8dyz2&iid\x12ytu\x1a\x07\xb5\xd7\xb2)\xa4\r\xd6\xeb)\x14\x01\x96\xae\xd0\x1e\xf8\xec\xb5\x1c\xce\xfa.a\x1c\x93\xb44\x86N\xc8\xc8\r9\xe9\xb8,T\x12Ts\x1f\xafM`\x18\xfal;}Z\xbe\x83"\x04\xf5D\x86\xaa\x91 \xaf\x9b\xec9C\x8e\xdd\x11%3A\xd5HR5\x92\x1c\xb9#\xf6\'#,Ee\xd6L\xb2\x9c\xc8r\xe2\x8d\xd9\xb1\x07\xc4H\xcaV\x8a\xfb3%\xba\xa1\xcb\xbe=\xc4w<\x9cJ\x80\xd3\x0b\xc0\x10\xe8\xc3\x80\xfdV\x8b\xe3F\x93J\xb9\xf8\xa2\xe0\xd4M\xf0\x16\x04\x98\xb2\xd30\x13,n|\xc2\x19}\xfaq\x0e\xd7W\xd1\xfa\x11\xe3g]\x9a}\x8f{\x0b\x19lwj\x17\xd8o9/\\\xba\x9dQ\x80\xa1*t\x86\x01\xdf\x1c\r\xc9$5:C\x8f\x94\xa5\xd2\xea{\xec\x9d9\xfc?_\x9f\xe3x!\t]A\xd7\x14\x82 \xa67\x0e\xb0\xdd\xe8\xed\xc2\xf1?\x10\xbc(\xe2\xdcw\x19\x85!iM\xe7\xf3\\\x85\x7f[\x9c\xe7\xd7\xf9\n\xff\xd3\xd1\x13\xfe\xb7\xd3m\xee\xa7\x8b\xfc\xdb\xd2\x02\xff\xae4\xcf\xff~\xb6\xcd\xff|\xf2\x8c\x8a\x91\xe0?\x94\x17\xf8\xef\xe6\xef\xf1\x7f\xb6\xf6\xf8\x1f\x0e\x1e1\x89C>\xcfU\xf9\xef\xd7\xfe\x8a/\x86m\xfe\xc7\xc3o\xd8\r\xfb\xb4\xb21\xa3\x8c\xce|q\x91\xf2H\xe1Y\xf3\x8c\xf4\x9f\x1e\xf1\xdf\xfc\xd7\x7f\xfdV\xf9\x03oA\x80\xe9\x08D\xa1\xcf\xe0\xbc\xc1\xa8\xd9@1r\xe4\x93Y\x0c+O\x10)\x1cw<\xc6n\xcc\xf9\xc8#\x8c$~(9\xe9\xbaD\xb2\x8f\xe3\x85\xd8^\x84\x17F4\xfb.\xff\xbc\xd5\xc3\x0fb\x06N\x80\x17Jz#\x9f/v\x07DRb\xbb!n\x10Q3M\x16*\x16\xa5\xcc\xcd\xc2\xb0>4\xb2\x9a\xc1z2O\xc5H\xb0\xe3\x0c8\x9c\x8c\x18\x84>KV\x86\xcdt\x9eY3\xc9\xb9\xefr\xeeO(\x1b\x16\x9b\xa9<\x1b\xc9\x1c-\x7fB7pQ\x85\xc2r"\xcbg\xd9\n_\x0c\xdb\x0cB\x9f^\xe4SK\xa4\xf8\xf7\x859J\xc3\x88\xa3\x96M\xd8\xb3I\x0c}P\x13\xac>\\\xe6\xde\xe6\xf2\xb7\xb3\xff\x86r\xc0[o\x01q\x14\xe2\x0e[x\xe7[\xe8\x86\x89Y\xacaiu|Y\xa4k\'iwUb\x94\x0b\xf3\xa8\xc2\xc0\t\x188\xc1K\x81\x10\xf6$b\xab1~\xe9\xb30\x82\xbd\x96}Y\xcb\t\x89\xa0\x906\xd8\x98MS\xcb\x9b\x1f\xb51\xa8\xa8[|\x96-\xf1\xff\xf6\xd2\xfcCO\xf2|\xdc\xe7y\xaa\x87\x1b\x85\xd4\x8d\x14\x9b\xe9<\x7f\x1c\xb4y<\xea\xd2\xf2\x1d\xaaf\x92\xcf\xb2e\xfeS\xfb\x80-{\xc0\xd3q\x8f\xb4\xaa\xf37\xf9\x19\xf6\xed>\xad\xd1\x88\x7fi\x1cQW,\x96\x07\x92\xf1\x99\x8f\xb25\xc0><Gz\x01\xc9\xd9*\x9f.-\xf0\xe9\x9d\xb5\x172\xc0M\xdf\xce[\x13\xc02\x0c\xee\xac/s\xd6\xea\xf0t{\x9f\xd6y\x0f\xdd<D*\x16\xe9|\x89Z}\x01i\x95p\x95,\x03O\xe0E\xdfw\xe0|k%|\x19\x17*/\xaa\xa2PH\xeb\xcc\x15,\x8aY\x03\xcb\xf8\xb8\rA)Mc!\x91a\xd1\xcaP6,\x9a\xde\x84S\xdf\xe6\xebQ\x87\x94\xa6\xf37\x85Y\xb6\xed\x01g\xbe\xcd\x1fzM6\xd3y\xfe\xb60\xcb\x9f\x06-\x9a\x9e\xc3?\xf6O\xf97\xa59\xfeM\xa9\xce\x17g\xc7\xec4N9<x\xca\xd6I\x87\xd3\xc33z\xfd\x01\xe3\xa1C\xec\x05\xac/\xce\xf1\xe9\x9du\x8a\xb9\xec;\xb5\xf9\xc6\x04\xb8\x9c\x81\x96eroc\x85\x83\xe3S\xbez\xfc\x9c\xfe`\x84\xaa\xf6\xd1\x14\x05\xe1\xf7q4\x17au\xf0\xd5<\xba\x9eA\xd7S(Z\x82\x00\x03/\xfe\xe1\\\x01$h\xaa`\xa1\x9c`\xb9\x96$mi\x17+\xc2\xc7\x0bU(d5\x83\x95d\x8e\xcdT\x9ea\xe4s\xe69\xfcs\xbf\xc9\xdf\x14g\xf9m\xb6\xc6\xffe\x1e\xb2\xe7\x0c\xf9}\xff\x8c\xba\x95\xe2N\xba\xc0Z*\x8f\xe35\xd9k\xb6X\x1aJ\xb4\xd8B<9#\xdc;d\xa7\x17\xd3?n\xd1<mM\xa3\x82cPT\x85R1\xcf\xc3O6\xc8_\x10\xe0mW\xc6\xb7_\x01L\x83\x8d\xb5E\xb6\xf6\x0e1M\x13E\x99\xc6\x01DR\xd2\xeb\x0f\x19\x8d\x1d\xa4P\xd0\r\x93z}\x8e|\xa5\x8ef\xd6\x18\xca\x1ca\x9c \xba\x10\x0b_\xb5p\t\xa6\x95\xbc\x0cMau&\xc9\xfal\x1aS\xfb\xd8\\\xc0\xaf\x86\x10\x82\xd5T\x96\xdf\xe6\xaa\xecN\x86\xb4\xbd\t\xff\xd8?\xe3W\xd9\n\xbf*T\x983Sl\xdb=\xbe\x1c\xb6\xf9\xeb\\\x8d\xcfS%6\xad,\xc3\xa8\x8f{\xdc\xe6\xf7\xcdC\xbe:\x1b\xb3\xbf\xbd\xcb\xf0\xbc\x87\x8b \xbe\xa8n&\x84\x82P@\xd3T\xea3\x15>\xb9\xbbF!\x97y\xa7\xf6\xbe5\x014M\xa5\\\xc8\xb3P\x9fae\xa1\x8e\x1f\x04\x8cF\xf6EbhH\x18\x06\x80$\xf4\'t[\x92\x89=D\xb5\x1a\x083\x87n\xe5\xc9g\x8b`dqd\n/V\x08cxQTA\\\x14r2U\x96\xab)Vj\t\x0c\xed\xa7q\xca\xad\x02\xac&\xb2\xfc&W\xe3\xef\xce\x8f9\x98\x8c\xd8s\x06\x9cxc\x02\x19s7S\xe4\xccw\xd8\x1f\xf6\xd89n\xf0\xc5\xb1Cwg\x1b\xf7\xe0\x90\xc1Y\x97\xf3\x9e\x832t\xe9\xf7\x86\xc4\xae\x8b\xfb\x9d#iR\xc9\x04\xf3\xb35V\x16\xeb\x94\xf2\xb9w\x8e\x0czk\x02(\x8a\x82i\x1a\xcc\xd6\xca|zo\x8d\xc1p\xccxl_9$A\x00\n\xb1\x94t{\x03\xe8\r\x10B!\x9dNR(\x140\xc4<"]\xc3\x89\xf3\xa8J\x12E\xe8H\xa1\x11\xa3\x00\n\x96\xa1R\xca\x1a\xcc\x97\x12Ts?\x9d\x83\x9a\x14!\x98\xb1Rl\xa6\x0b\xccZ)\x1e\x8d:\xf4|\x8f\xddQ\x9f=\xb3K%PXsu\xce\x9ac\xb6\x07\x03d\'\xe6p\xeb\x90N\xa3\xc5h4\xb5\xfbOW@\x10\xaa\xf2\xd2\x9e\'\xa5$\x9bI\xf3\xe0\xfe\x06\xcb\x0bu\x0cS\xff\xf1\xe3\x01\x8a\x85,\x0f\xee\xad\xb3\xbdw\xcc\xf6\xde\xe1w~+_x\x06\x01\xa4\x8cp\x9c\ta\x182\x18\x8eA\xdd#\x14&\xe5\xea\x0c\xe5\xda\x1c\x81Vb"\xd28\x91A%\x9f\xe0\xee\\\x9aBZG|\xe4{\xff\xcb\x10(@N7\xb8\x9f)\xb2\xe7\x0e\xd9\xb2\xfbl\xf7\xce\xf9}/$:\xed\x11\xec\x1c!\x9f<\xe7x\xe4\xd2\x0f\xc0\xb1\'\xf8\xaeG\x14\x84\xaf\xcd0\x10\x02\xa2H\x92M\'ypw\x8d\x85\xb9\x99[\x89\x0c~g\x02\xe43Y\xee\xac\xaf0_\x7fL2i1q\xfd\x17g\xf6\xbc\na\x18\x12\x84!\xb6\xed\x00\x12E($\x85\x8d#\x1c\x02\xbdC\xa8\xe7\xd0\xcd\x1c%\xab\xcel\xb9@"\xf1\xd3\xd8\xfb\xbf\x0b\x0b\x95\xb98\xc1\xf2Xc\xd8p\xe8\x8d\x86\xfc\xcb\x18\xcc\xd6\x98\xc1\xc99\xd1\xfe\x19\xae\xe7c_\x94\xc4\xfd\xa1\x99\xac\x08\x85d\xd2\xa0Z)\xb2\xb1\xba8=\x9a\xe6\x16T\xe2w\x0e\nM\xa7\x13\xac,\xd6YZ\xa8S)\x179kup&\xd1\x1b\x07l\xba\xcf_\x08\x81B\xd0\xe9t\xe9\xf5\x87H\x04\xa9T\x9a\xfa|\x9d\x8c\x90$2UT\xedj>\xdc\xb7\xee\x94\x8f\x85\x10\xdfUe_\xb4\xd0\x87\xd4\xb9`f\xc7g\xf2\xf8\x9c\xf6\xd1)O\xbaCD\x14\x13\x851a\x14\xa1h\xca\xb5\x966)%\xaa\xaaR\xad\x14YY\x9ccqa\x96\\6}+\xed\x7f\xe7\x15@\x08\x81i\x1a,\xcd\xcdpg}\x99\xd1\xd8\xc1v&\xd7?\xd8AJ\xc2(\x84pZ\xe2-\x99\xd4\xb1R\n\x93D\xc4n<"\xee5\xa9\xfbc\x8af\x82\xb2a\x917\r\x0c\xe5\xe5\xec\x9b\x1f\x13\x97B\xabwa\xae>\xe9N\x03X\x0e\xdb6\xdf\x1cytNA\x1d\x06\xc8\xd1\x04w\xe8\xbch\xf6M\xf7nMSYY\x98ccu\x91t*\xf1N\x0e\xa0\x97\xee\xfb._\xbe\xec\x82\x10\x82\x85\xb9\x19\x1e\xdc]\xe7\xf9\xf6>\xadv\x87k\xe7\xces1\x9f\x15 \x06=a\x91\xaa\x95\xf0\xb2&\xbb\x81M\xa3\xebS\x1e[\xac\xa4\xb3,\xa7\xb2\xccEi\xb2\x86NB\xd5\xd0\x10\xd3\x93\xbf\xc5\x87_\x11\xa2X\x12\xc6\x920\x8cq\xfc\x88\xde(\xe0\xa0\xed\xf0\xcd\xe1\x90o\x0eG\xec\xb7lF\x9eD\xb55R\xc2B\xd5\x0c\x84z\xd1\xca\x1b\x8c\xdb\xe5@\x9b\xa6\xc1\xe6\xea"w\xd6\x971\r\xe3\xc5\xef\xde\x15\xb7\x12c\xa3(\nK\xf3\xb3<\xb8\xb7\xce\xff\xfd_\xfe\xf1-\x056\x81\x8cc\xf4\xa4Iau\x16\xbdR`"\xa6\x0e\x96\xb6\xe7\xe2D!;\xe3!Y\xdd\xa0\x9eL1\x9fHQO\xa4(\x9b\t2\xfa\xed$I\xdc\x04\x13?\xe6\xac\xe7\xb2\xd7\xb4\xd9>\xb3\xd99\xb5i\xf5=Fn\xc8\xc8\tq\xbc\x888\x06\xcbH\x90.\xce2\xec\xf7\x90\xf2\xfc\xad\x88\xaa*\xd3\x90\xf9\xbb\x1b\xcb\xdc]_\xc62o\xcf#z;\x04\x10\x82|.\xc3\xc2\\\x8d\xf9\xfa\x0c\xfbG\xa7\x8c\xc66a\xf8\xfa\x1c\xf8\xefb\x1a1l`f\x92\xa8\xa5,"e!\xe3\x90HJ\x9c(\xc4\x89\x02b\t\x9a\x10t=\x97swB\xcb\x9d\xb0\x94\xca\xb0\x98\xcc\x901\x0c\xcc[\xca\x97{\x13\x82(\xa6?\x0e\xd8k9|s0b\xfb\xccf\xbfes\xd8\x9e0\x9e\x84(\xcatE\xbb\xd4\\\xa4f\x11\x8a*\x18G\xa8\x8a\x82\x8c%\xd7I\x0f\xbf\x8a\\6\xc5b}\x86\xf9z\x95B>{\xab\t\xa2\xb7\x1ae\x97N\xa7\xf8\xf4\xee\x1a\xadv\x97\xaf\x1e?\'\x0c=\xae\xbbW+\x8a S\xc8\x90(d\x19k\x02S|\xdb\xc9K=@\xbb\xd8p;\xbe\xcb \xf0\xd8\x19\x0f9\x9d8\xb8\x85\x88\x8dl\x8e\x8a\xf9\xfe3\x84m7\xe2\xab\xfd!\xff\xf8\xac\xcb\xef\x9f\xf7\x18OB\xc2H\x12D1\xba&^\xca\xf3\x10\x80\x17\x1btd\x0eOIc\x99\x06\x9e\x1f\xbcQKz\x15\xea3\x95[1\xfb\xbe\n\xb74e\xa6\rJ\x9a\x16\xf76WX_Y@Q\xd4k\xfb\xa6\xa5\x94\xa8\x9aJ}u\x81\x99\x8dE\x14S\'zE\xf0\xdfTG\x96\xf8q\x8c\x13E\x0c}\x8f\x93\x89\xcd\xdex\xc08|\x9b\x02s\xd7\xc7\xb75\x10b\x9e\x9c\x8cxr<\xa2\xddw\x19:!\x13?"\x8a\xe5\x0b\'\xd6UDR\xe0K\x9dT\xb6Hmf\x16\xc34o6\x83\xa5d\xa6Z\xe6\xe1\xfd\x8dit\xf5-\xe3V\x08p9N\x86\xa1\xb3\xbe\xbc\xc8\xda\xca\x02\xa9\xa4u\xad\n\x97\x97B\x8e\xa2kTV\xe7\xa8\xad\xcd\xa3\x19:oR!.\x83KT!\x18\x87\x01\xc7\x13\x9b\x81\xef\x13\xca\xf8\xc6\xcb\xeb\xf5!\x89b\xc9\xc0\t\xd8o:\x9cv]\x10\x02U\xf9\x1eO_\xd1`A:[\xa4T[\xc40\x13/\x8a@\xfd\x10\x14E!\x910\x99\x9b\xadqg}\x99\\\xe6vT\xbf\x97\x9eq\x9b7\xd3u\x8d\x99j\x89\x95\x8b\x93\xb5\xb3\x99\xd4\xb5\xbe7\xdd\x17\x81|\nQHs\xddt\x17\t\xb8Q@\xd7\xf78s\x1d:\x9e\xfbr\xd5\xf1[D,\xa15\xf0\xd89\xb5i\xf6\\l7"\x96\xd7\xa7[ld\t\x135\xa4b\\)\x1d\xffzH)I&L\x96\x17\xe6XY\x9c\xa5Z)bY\xb7\x1f\x0ew\xab\x04P\x94i\xeaW\xadR\xe6\xde\xc6\xf2\xb5\x0b\x1c\xa6siJ\xb3U\x94L\x82@W\x90\xd7l\x95\x84\xa9\x90\x18\x86\x9cN\x1c\xce&\x0e\xc15\xea\x0b\x01\xc42$\x96\x01\xb1\x0c\xaf\xb5j\xc4R\xd2\xe8\xba<o\x8c\xe9;\xc1\x94h7Xl<\x12\xb8J\x0e3\x99%\x99J^\x1c?\xfbj\\\xae\x8a\xe9d\x92\xbb\xeb\xcb,\xce\xd7I%\x12\xb7V\x14\xe2*n\xf7\x8e\x17ka!\x97\xe1W\x9f\xde\xa1>S\xb9\x96\x08X\x9d\x9fa\xe3\xd7w\xd1\xb3)&ax\xc3E|\xea\x82n\xba\x0e\xc7\x8e\x8d\x17O\x05\xac\x97\xad\x87\x17\x91\xb8\xc4Hb"\xe9\xe3G#\xbcpH\x10\xdb\xc4\xb1\x87\x94\xf1\xc5\xef_\xae\x1fvy\x9f0\x96\x1c\xb5\x1d\x9e\x1d\x8fp\xbc\xe8"\xac\xfb\xfam\x9c\x84*\xe38A\xbeT\xa5\\.\xa2\xfc@\xfd\xc4o\x1d?\xeb,\xd4k\xef-\x12\xeaV\xb5\x80\xcb&\x16\xf2Y~\xf5\xc9\x1d\xbex\xf4\x0c\xdd\xd0\t\xde\x904*\xa5$]\xceS\xd9X\xc0M\'\x08\xe2\xd7\xd5\xd9\x7f\xfd3c\x19\xd3\x9eL86\xc6\x0c\x03\x9f\x8c\xae\xa3\xbe\xa8\xc3:\xbd[,]\x9c\xe0\x9c\xb1{\xc8\xd0;d\xe4\x1f\x10D\x0e\xaab\x926\xead\xcd%\xb2\xe6\x12\t\xa3\x8a\xae\xbc\xbc\xd7\xfa\xa1\xa4?\x9a&\xae\x1c\xb4\'\xb8\xfe\xab\x0f\x96~\x13b9-2\x95\xccUQ\xfc\x01J\xab\xf7\xfa>\t\x81e\x9aT+E\xee\xdfYcv\xa6\xfc\xd3 \xc0%\xd2\xa9$\xeb\xab\x8b,\xce\xcfR\xcce\xe9\r\x86\x17\xa7\x85\xbc\x0c!\x04\xaa\xa6a\x16\xb3$f\xcb\x04j\xfcV\xc5\xa2c)\xe9\x07\x1e\xed\x89C\xc7\x9b\x907tR\x9a\x86\x90!\x91\xf4\x89e\x80\x1d\x9c\xd1\x9bl\xd1\x1e\xff\x0bm\xfb\xcft\x9d\'x\xd1\x00MI\x90\xb7\xd6\xa9\xa4>\xa3\x96\xf9+\n\x89;\xa4\x8d\x054\xc5D\x11\x06\x8a\xd0\xb1\xbd\x98\x93\xce\x84\xe3s\x97\xf6\xd0{\xdb\x93\xec\x10\x8a\x82j\x95\xd0\x9c\x1e\x8a\xb6\x8bxM\xb5YUU(\xe6r,\xd4k\xac.\xce\x91\xcffn\xbd8\xd4%\xde[\xb6\x9d\x10\x82\x85\xd9\x1a\x0f\xeeo\xf0\xe7\xaf\x9f\xe2\xb8\xde\xf7\xbcW\x86i\x90+\xe5P\xb2\t\x06jL(\xde\xce\xc2\x7f\xf9j\x9c8\xe2p2&k\x18\x18\x8a\x86\xed\xee\xd2\x99|\xc3\xb9\xfd5#o\x1f;h\xe2\x06\x1d\xbch@\x10\x8d\x81\x98X\xfa\x0c\xbd=&\xe19M\xfbO\xa4\xf4\x192\xe6\x12\xc5\xe4=\x8a\x89\xfb\x14\x92w\xe9\x8du\x1e\x9f\x8ci\x0f\xfd\x17\x89\x9a7~\x1fH"\xa9\xd2\rs\x842\x87aZD\xfe\x84 \xbc<\x80\xe8\xa2Z\x9e\x94\xe8\x9a\xc6\xe6\xda\xd4\xeck\x98\xef\xd7\xca\xf9\xfe\xd2-\x05\xcc\xcfM\t\xb0sp\xccY\xab\x83\xd0\xbe=zMJ\x89\x95J0\xbb:O\xb2\x92\xc7{\xcb\xc1\xbfx\x14\x86P\x88\xdc\x80\x83F\x13krL\x94\xef2\xf6\x9es\xee<\xe2\xdc\xfe\n\'h\x12\xc9\x00S\xcd\x92\xd4+$\x93\x9f\x10DcF\xfe\x11^4d\x12\x9c#\x89\xd1\x944I\xa3\xc2\xd0\xdbg\xe4\x1d1\xf4N8l\x94\xd8\xde\x05{\x18ci\x11~\xa4\x11\xbfEk%\x82I\xa4\xa3h\x19r\xf92"\xf2\x18\x8e\xaeDE\x8b\xa99\\\xd346\xd7\x97\xb8\xb7\xb9\x82\xa1_\x9e.\xfe\x13\xda\x02.Q\x9f\xad\xf2\xe9\xdd5\xfe\xf3\xff\xf7\x87\x97G\xf7\xa2\xa3\xc9|\x86\x85\x07\x1bh\xf5*\xeeM\xb2>\xbf\xbb\x1cJI\x12\x051\xb6\xd9o\x9cc\xe7\xfeD{\xe1\x9f\x88E\x9f(\x9e\x10K\x1f!T\x92Z\x9er\xf2!\xd5\xcc_1\x93\xfa-\xe7\xce#\x9e\x9f\xff/\x84\xb1G,\xc2\x0b\x898d\x12\xb49\x0b\x07\xb4\xc7_\xa3R\xa4\xb1\xb3\xca\xe1\xb3\xfb\xc8h\x96\x9c^\xa0\x17\'\xf1c\xfd2\xd3\xeb\x86\xb1\xf8\x12+\x91\xa48\xb7\x80\x8c&\x0cG6WEV\x01\x98\x86\xce\xe6\xda\x12\x9bkK/\x08\xf0\xbe\xf0\xfe\xb6\x00 \x9fK\xb307\xc3\xd2|\x9d\x83\xe33\x06\xc31a\x18"\x98\xea\xfe\xc2\xd0\xd0\xab\x05\x94L\x02\xc9\xf5\x84?!\x04\xaa\xaa\xa2\xc5\xa0\xf9\x01\xce\xf9\x80\xc1Y\x87\xf3\xde\x08\xbf7\xc2\xed\x0fYX8A\x15\x11\x99\x82O*cR\xb4>!o\xad\x921\x97IhE4%\x89\x134\x19z\xfbx\xe1\x80XN\xe3\x17%\xd3\xa8%dH\x88C\x1cx\xb8\xbd\x0c\x87\xbb\x03\xf6v\xb6\xf0\xc26j2\x0bF\x9et2\x87\x99\xca\xe1\x8b4.&a,.\x0e\'\xfb\xa1~H\x84j!\xb5\x1a\xe8\xa7\xdfSA\x8b\xf9\x1ck\xcb\xf3\xcc\xd7\xab\x14\xf3\xd9\xf7\x1e\t\xf5^W\x00C\xd3)\x15rl\xae-rxr\xc6\x93\xe7\xbb\xf8A\x80\xa6*XI\x0b=\x93$H\x1bh\xba\x86x\x83)Wp\x91A\x1b\xc7\xc80"\xf4C\xa4\x1b l\x0fg\xef\x94\xd6\xb3=\x9a\x87g\x8c\xfb#\x84\x90`\x9b\xd4\xf2\xab\x9425j\xe9\x0c\x95\xe4\xe7\x94\x92\x9f\x906\x17\x99\x04-z\x93g\xb4\xc6\x7f\xe2\xdc\xf9\x9aI\xd0~E\xed\x7f\x81"T\x02?A\xff\xb4\xce\xd9a\x92\xd3F\x9b\x89s\x86a\x9a\x14\xf3y\x92\xa5*\tu\x16\xa9\x94\xf0d\x16U5P\x15\x1dP\x88Q^\xbbE\x08 \x14:\x135O\xa4g0t\x830\x08\x88\xe5T\xb3\xa8\xcf\x94y\xf8\xc9\x06\xd5R\xf1\x8d\xa7\x95\xde\x16\xde\xab\x10\x08\xd3\xf0\xf1\xcd\xf5e\x0e\x8eN\xd9\xde;DF1z*\xc1\xc2\xc6\x12\xb5\xbb\xcb\xc4\x9aF \xe3W\xda\xfd/\xef\xa3\tA\n\x95\xd8\xb6\x197\xda\x1c|\xb5M\xb7\xd1B\x8b%\xfex\x823\xb4q\x9d\tq\x18"\x14\x85aW\xa5uX\xe6\xbf\xfa\xfc?\xf2`f\x0e\xdb\xeb\xd1w\xb79\x1a\xfc\x1dC\xef\x10\xdb?\xc3\r\xbbSAP\\\xa4j\x7f\xf7E\x8b\x18\xdf\x97\x9c\x1c\n\xda\'\na\x10#eL\x18x\xf4\x07=\x9c\xc9\x04\xbd\xdd"\xc4@\xb1\xd2Tku\x92\xf9*\x91^`\x1c\'qB\xed\x85%\xe1\xbbT\x08\xa5\x8a\x1d\x9aX\xa9"\xb5\x99\x1a\x9dv\x1b\xdbq\x00\x85\xfaL\x95\x87\xf76\xc9\xbd\x08\xf7~\xbf\x91\x0e\xef\xbd\xe6\x86\xaek\xac/\xcf\xb3\xbf\xb6\xc4\xdf\xff\xf3\x97\x0c\x86c4\xc3\xa0\xb6:Oee\x0eWS\xe0\x8a\xf9\xf6\xd2\x95\xaa\xc6\x12\x82\x08o\xec`\x8f&\xb8\x8eG\xd8\x1b1:9\xe7\xf4\xab\xe7\x9c7Z(\x97\xbe\x86\xcb\x80\x90\x0b\x12\x8d\x861\x8d\xa3\x90Q\xd7\xc4\x9d@\xcf\xdd\xa5\xeb}I\xdfyJ\x14\xfb\xa8\x8aE\xceZ!\x88ll\xff\x18/\x1a\x12\xc9o\xabyH)\x90~\x8a\xc90K\xb3\x11\xd3\xe9\\\x96w\x17\xc4\xb1\xc4u=&\x13\x17\xe8\x03`Y\x16\x9e\xea\xa0\x06C"\xa3\x00Z\x0eCM\xa3\x99\t\xa4b\xe2I\x9dX~;\x90\xb1\x04_\xaa\xe4Ry\xd2\xf1\x0c\xc3\xd1\x18\xd5sI\xa7\x12,\xce\xcfrwc\x99\xecE\xd5\x8f\xf7\x9d\t\xf7\x01\x08\xa0\xb3P\x9fa}y\x9eZ\xa5H\xb7\xdbG\xd5U\x12\xb5\x02\xc9j\x01_\x91/\xf6\xceK\xa8\x12,?F\x198\x8c\xb7\x0e9\xdb>\xa4yp\x8ak\xbb\xc80\xc2w}\xd4\xd7\x96\xa2\x9d\xd6\xe2;>m\xf0\x87\'\xff\x89I:\x80\xe4#\x84>B\x13I\n\xa9\xfb\xd4R\x9fSM\xff\x15\xbd\xc9\x13\xb6\xda\xff+a\xec\x11q\xa5\x9c\x8b\x14x\xa3*\xa3\xd6\x0c\xdd\xf3\x90\x91\x1d\xf2]\xbb\xefU\xa9\xdc\x0f\x02N\x1a\r\x94\xb3\x16B\xd1\xc8\xe5\xf3\xe4KU2\xa5:\x91V\xa1\x1b\xe5\x08xYs\x10B\xa0%\xb2\x18\xa2\x86\xa2\x1d\x91\xb0Lf\xabe\x96\x17\xa6~\x94\xcb\xa8\x9f\xf7\x8d\xf7N\x00!\x04\xba\xaeQ)\x17\xb8\xb3\xb1\xc2\xc4\x0f\x18\x13#3\t<C\x838\xc4TU\x8c\x18\xa2\x91\xc3\xa8\xd5\xa3qp\x8a\x1c9\x08\xc7c\xd8\xea\xd2o\xf5\x18t\xfaS\x01R\xbc\xb9Z\x98\x94S\x15\xd3u\x03\x1a\xc7.\xd5Y\x83\xd5{kT\x0b\x15\xb2\xe6&Ys\x99\x84^\x99\xee\xf1\x91C(\'Hy\xb5\xb6\xe1\xd4\xad;\xea\xe4\xe8\x9c\x14\x99\xd8#\xa2(@Q\xdf\xf0\xcc8\xc6\xf7<\xc0C\x08P\xa4O\x1c8L\xc6}b=\x83\'\xd2$\xb3ER\x99\x02\xb1\x9e& \xc1$R\x99\x90"\x14%\x14#M\xc5\x94\xdc\xdb\\e\xbe^\xc32\x8d\x0f\x96\x04\xfb\xfe\tp\xf13\x97\xc9\xf0\xe0\xde\x06\x1e1\x07\xa3!X:\x93\xd0\'\xf4\x02\xb4\x18\xa4\x17\x11\xb5\xfa\x8c\x9e\xed\xb3\xff\x87\xaf\x19\xf5G\x0895\xf3^\x06Y\\\xe7\xfc\xa1K\xc4\xb1\xc2\xf9\x99A\xff\xb4N\xf5\xd7s\xac\x95\xee\x9236\x11\x02\x9c\xa0I\xdb\xfe\x82\x8e\xfd\x15n\xd0yI\x08\x94(\xc4\x91F\xafe\xd2<\xb6\xf0=\xfb\xf5g\xfb\\\xed\xe7\x8b\x01\x138\xae\x87\xe3z\x88\xf3\x0eBQ0t\x83\xd4l\x9d\xa4>O$\xab\xa0\xe4\xf1b\x0bO\x1a\x04\xd2\xc2L\xa4\x99+\xa6\xf9\xec\xc2\x7f\xf2!\xeb }\xb0\xba[\x85|\x86_}\xba\xc9$\xa9\x13\xb5\x9b\x18\xe94a\xd7\xa1\xbb\xdf\xe0t\xff\x94n\xa3\x85t\x03&c\x07{`\x13\x87\xdf\x8f\x9a\xb9\xae<|\x99Dqp\xd8\xa5\x90O#\xbc\xbf%\xf4c\x0e\x9d\xbf\xa3\xe7>\xa6\xefn\xe3\xf8M&a\x1b/\x1a\x10_9\xffGF\x06\x81\x9d\xa5\xd1\xf0\xd9?\xe8\xe1N\xc2\x1b\x97\xbd\xbfl\xa8\x04\x88b|\xe9\xd1j\x9e1\x18\x0c\x88\x95-\xccd\x96\\\xb1J"WE7\x13\x84\x95"KKE>\x7fx\xff\xc2\xf1s\x83\xc7\xbd#>\x18\x01\x92\t\x8b\x85\xb9\x1a\xad\xc8g bF\xee\x84\xf6I\x8b\xf3G\xbb\x9cl\x1f\xd1n\xb4\xa6\xc2\x9c"n\xc5\xed)\xa5d8\x9cp\xd6\x1cqr2B$\x0e\x18\x8b\xbfg\x10l\xe3\x85}\x0c5\x8b\xaaX\xa8\xc2D\xe2^\x1c\x02%\t\xdd$\xe3\xce\x0c\xfd\xb6N\xbf?y\xa3\xdb\xf6Z\xed@"c\x89m\x8f\x19\x8fG c\x92\xc9$f<$\xab\xfbT\xb2u\xccL\x89\x8d\xd5\x05\x16\xe7f\xc8f\xd2\x1f4\x0b\xea\x83\x11@Q\x14\x12\xa6\xc9l"\xc5\xa20xv|B\xf7\xc9\x01\xc7\xcf\x0e\x18\x8dmt\xcb\xf8v\xe6L7\xf2w|\x11\x12MS\xb1\x9d!\xbf\xff\xf2\xef9\x0bN\xc8-<&ie\xa9\xa6\x7f\xcbl\xe6w8\xfe)G\x83\xff\xcc\xf8\xa2\xc6?"\xc6\x1dg\xe9\x1e-\xe1\x8d]\x14\xe5v\x8ehy!\xb7\\h+a\x18s\xde\xe9\x92\xcbf(\x98\x15V\x96g\xd8\\\x99\xc12?|\xf9\xfb\x0fF\x00!\x04\x9a\xaaR-\xe4\xf8tu\x89R2\xc9B\xb9\xc4\xdd\xa59\x1agmN[\x1dN\xcf\xdat\x07C|\xdf\xffN\x92\xe9\xcdq\xf9\xfd\xc9$bk\xabG\xa1V\xe4\xc1\x83\xff\x96bz\x81\x84:\x83\xa6Z8\xfe\x19\xb1\xf4/\xac\x7fS\x19c<\x14\xec\xefH\x06\xbd\xcb\x98\x80\xb7\x1f\x8eo\x0bcKLS\'\x93NR\xafU\x99\xa9\x95\xa9\xd7J,\xcf\xd7Y\\\x98\xa5R)S+\x17_\x10\xe0C\xe2\x83\xd6\xde\x14BP\xc8f\xc8g2l\xae.\xe2y>\x83\xe1\x98\xe7;\xfb|\xf5x\x8b/\x1fo\xb1\x7fxB\xaf7\xc4q\xbd\x17y\x84q|\xfdC\xa5\xafBQ\x04\x9e\'99\n\xf0\x07\x9f\xb0\x98\xfa[\x8a\xb9\x12~4\xa6c\x7f\xc1\xd0\xdb\xc7\r\x07D\xd2\x9b\n\x7f\xa1\xc5\xa0\xabr\xb0?b0|\x97\xc1\x17(\x8a@\xd7T4]\xc34t\n\xb9,s\xb3U\x1e\xdc\xdf\xe0\xe1\xbd\r>\xb9\xb3J\xa9X\x98J\xfc\x8a@\\|\xe7C\xe3\x83\x17_\x9d.\x87\x00\x82\x84e\xa2\xaa*\x9f\xdc]\xa3>S\xe5w\xbf\xfd\x8c\xd3\xb3\x16\xcfv\x0e\xd8\xde=d\xe7\xe0\x98\xa3F\x8b\xf1\xc5!\x14\xdf-\xa0|\x1dDQ\xc4p\xe4p|\xd2\xe6\xd1\xb3g\xa4\xab\x07\x84\xfa\x0eNp\x86\x134\t\xc2\x11\x88\x88\xc8O\xe1t\xd7\x18\xb5\xd2\xd8vD\x18\xbe\xdd\x06$\xa5$\x8ect\xcd`\xb6Vaei\x8e\x8d\x95\x056V\x17YZ\xa8\x93\xcfe(\xe6\xb2\xe4\xb2i\x0cC\x7f/a^7\xc1\x8fZ}W\x08\x81i\xe8\x98\xc5\x02\xe5\xe24~pl/\xb34?\xcb\xf2b\x9d\xa5\x9dC\xb6\xf7\x8e8m\x9e3\x1c\xd9\x0cFc\xc6\xb63-\x95rmupZ\xb0\xe2\xac\xd9\xe7\xd1\xe3=*\xc1\x9fIU\x0f0\xd5\x1c\x9a0Q\x15\x93XD\x84\xbe\xc6\xf9I\x85^\xd3$\x0czo<\xd8\xf1UPU\x85\x84e\x91\xcb\xa4\xc9fR\x94K\x05\xd6\x96\xe7/\xbcz\x8b\xac.\xcd\xbf\xd7C\xa0\xdf\x16\x1fU\xf9e)%\x96e\xb2\xb1\xb6\xc4\xe2\xc2,\x7f\xf3\xdb\xcfh\xb6:\xec\x1e\x9c\xf0\xf5\xd3m\x1e=\xde\xe2\xf9\xee!\xae\xeb\x12\x84S\xa9\xfd[\x1e\xc87F\xea\xf4{.;[c\xd23i\x96\x96\x1f0\x93\xfe\x1dN\xd0\xe4x\xf0_\x98D\xc7\xf8\xaeJ\xe3@\xa1}\xaa\xf0\xa6\xc0\xe2\xcb\xd5\xeb\xea\xbfUE!a\x99,\xcc\xd5xpo\x83\x07\xf7\xd6\xd9X[d\xb6Z!\x9bIa\x1a\x06\x86y\xf3\x1a~\x1f\x02\x1f\x15\x01.\x05E-\xa1\x92LX\x14rY\x8a\xb9,\x95R\x81\xfal\x99O\xee\xacrt|\xc6\xe1\xc9)\xc7\x8d\x16\x8df\x9bno\x88\xedL\x00\xf9Z+\xa1\x10\x82~\x7f\xc2\xe1\xe1\x90\x87\xe3\xbbT\xb4UJ\xd6\nB|\x01R!tsL\x06IN\x1b\x01\xddn|1P\xdfo\xdfty\x07IL\xc24)\xe43\xccT\xcb\xcc\xcdTY^\xa8\xb30_cn\xa6\xca\xc2\\\x8dZ\xa5D*\x95\xbc\x95\x1c\xfe\xf7\x89\x8f\x8a\x00WqyV`"a2W\xafR\x9f\xa9\xf0\xaf~5\xb5\xf3?z\xb6\xcdW\x8f\xb7\xf9\xe6\xc96;\xfb\xc7\x9c\xb5;\xf8\x9eO\x10F\x04\xe1\x95\x00\xd4\x0bUR\x08p&.\xcd\x96\x8a\xd7_Bq\x1e\x10\xa5&\xf8\xd1\x00?\x9a0\x19\x16\x18\xb6\nt\xda\x1e\xa31\\=\x96\xe0\x92PB\x80\xa6\xe9\x18\xba\x86\xaa\xaaTJ\x05V\x16\xe7\xb8\x7fg\x8d\x87\xf7\xd7yx\x7f\x93r1?\xbdV\xb9(\xe8\x04\x1f\xe5\xac\xbf\x8a\x8f\x96\x00W\x97ZU\x88\x17\x01\xec\x99L\x8a\xfb\x1b\xab\xcc\xd6*\xfc\xee\xf3\x07\x1c\x9f6\xd9\xdd?ak\xf7\x80\xad\xdd\xa9\xcc0\xf1\'\xa8\xca\xf4\x14\xcf\xab/?\x08}\xb6\xf6\xf7\xc8=:\xa7\xba\xf6\x08\x99|\xce\xc4\xeb1hU\xe9\x9c\x96\xf1\xbd.\x12\xff\xc5s\xa7\x05\xaf\xa6+\x82\xa6)\xcc\xd6*\xdcY[bcu\x91\xb5\xa5\xb9i\xd0k!G.\x9b&\x9f\xcd\xa0i\x1fw\x1d\xc3W\xe1\xa3%\xc0\xeb\xa0*\n\xc5B\x8eba\x9a\'\xb7\xb1\xba\xc0\xfa\xca\x02\xcbKu\xe6\xeb5j\xd52\xed\xf3\x0e#{\xc2h<\xc6\x99\xb8\x04AD\x14EDq\xcc\xee\xc11J\xcae#\xfdG\xf2\xd5>\x9e\x9b\xa2y*h\xec\xc3Ey\x7f@`\xe8*\x96e\x91\xcd$\xc9\xa4R\x14\x0bY6V\x97\xb8\xbf\xb9\xca\xdd\x8d\x15\x16\xe7k\x94\n\xf9\x1f\xf1M\xdc\x0e~r\x04\xb8\xc4\xa5\x16\x90HX\xac.\xce1?[\xe3w\x9f?\xa0?\x18\xb1\xb5w\xc8\x97\x8f\x9e\xf1\xd5\xe3-v\xf7\x8f\xe9\xf6\x07D\x11\xc4\x91\xe4\xe4x\x88b\xba,>H@(\x08&\x16\'G\x1e{\xfb\x1d\x820z\xa1\xa6\xa6\xd3I\x16\xea5\x1e\xde\xdf\xe4\xb3O6\xb9\x7fg\x95R!O2ia\xea\x06\x9a\xf6\xadc\xeac^\xe2\x7f\x08?Y\x02\\\xbetMU\xd1T\x15\xcb2\xc9fR\x94\x8a92\x99\x14\x95R\x81\xbb\x1b\xcb\x1c\x1eO\x8fW99k\xd1lw8k\xf6\x18\xf4b\x86\xad\x1a\tUa<\xd4\x18t\xa7\x95>j\x95\x123\x952\xb3\xb52\x8b\x0b\xb3,\xcf\xcf0_\x9faq~\x86z\xad\x82y\x8b\x85\x19>\x16\x08\xf9\xbe\x83\xce>\x10^\x84\x9bO\xff\xf3B\x88\x1c\x8cl\x9e\xef\x1c\xf2\xf8\xd96_?\xd9\xe6\x9bg\xbbxA\x9fO\x7fm\x91\xcf\x19\xb8\x13\x85\'\xdf\x8c\x19\xf55\xeem\xae\xf2\xe9\xdd5\x1e\xdc\xdb`smZ\x89kZ\xcbJ\xbc\x88T\x82\x9f\xf6\x8c\xff.\xfeb\x08\xf0:\x84Q45"\rGtz\x03NN\xdb\x9c\xb6Ni\xf7\x0f\xf0\x02\x17CMR\xca\xd6\xa8\x95\xeb\xcc\xcdV)\x97\xf2\xe4\xb3\x99\xa9\xfe\xfe\x178\xe3\xbf\x8b\xbfx\x02|\x17\xb6=\xa1\xd1l\xf1\xcd\xf3\xa7\x0cFcRV\x8a\xcd\xb5\x15\x96\x17\xe6H\xa7S/\xe9\xed\xef\xe6\n\xfai\xe0gE\x00)%Q\x1c\x13\x06!\xae\xe7\x11\xc51\x8a"0\r\x03]7P\xd5\xa9\xda\xf8\x97>\xe8W\xf1\xb3"\xc0/\xf8>~\xb2Z\xc0\xbb\xe2*\xef\xff\x92\x84\xba\x9b\xe2gK\x80\x9f\xf3\xa0_\xc5O\xa3\x08\xff/xo\xf8\x85\x00?s\xfcB\x80\x9f9~!\xc0\xcf\x1c\xbf\x10\xe0g\x8e_\x08\xf03\xc7/\x04\xf8\x99\xe3\x17\x02\xfc\xcc\xf1\x0b\x01~\xe6\xf8\xff\x01\x89K\x1a\xdb\x9enwf\x00\x00\x00\x00IEND\xaeB`\x82'
    def get_icon_data(self):
        return self.icon_data
icon_data = IconData().get_icon_data()
icon_image = Image.open(io.BytesIO(icon_data))
icon_photo = ImageTk.PhotoImage(icon_image)
root.iconphoto(True, icon_photo)
app = MyApp(root)
end_time3 = time.time()
runtime3 = end_time3 - start_time3
print("Runtime 3:", runtime3, "seconds")
def create_folders_if_not_exist():
    folder_names = ["MAP_CSVs", "MAPs"]
    for folder_name in folder_names:
        if not os.path.exists(folder_name):
            os.makedirs(folder_name)
            print(f"Folder '{folder_name}' created.")
        else:
            print(f"Folder '{folder_name}' already exists.")
create_folders_if_not_exist()

root.mainloop()
